
VERBOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002d10  08002d10  00003d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dcc  08002dcc  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002dcc  08002dcc  00003dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dd4  08002dd4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd4  08002dd4  00003dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dd8  08002dd8  00003dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002ddc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000068  08002e44  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08002e44  0000423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079cf  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001670  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0000d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e9  00000000  00000000  0000d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d56  00000000  00000000  0000e0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c60  00000000  00000000  00024dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d486  00000000  00000000  0002ea5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c28  00000000  00000000  000bbf28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000beb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002cf8 	.word	0x08002cf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002cf8 	.word	0x08002cf8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fc26 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f848 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f8c8 	bl	800074c <MX_GPIO_Init>
  MX_TIM10_Init();
 80005bc:	f000 f8a2 	bl	8000704 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

    scheduler.pid = 0;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <main+0x88>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
    scheduler.next_pid = 0;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <main+0x88>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	709a      	strb	r2, [r3, #2]
    scheduler.cur_pid = 0;
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <main+0x88>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	70da      	strb	r2, [r3, #3]
    scheduler.last_pid = 0;
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <main+0x88>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	711a      	strb	r2, [r3, #4]
    scheduler.preempt_pid = 0;
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <main+0x88>)
 80005da:	2200      	movs	r2, #0
 80005dc:	705a      	strb	r2, [r3, #1]

    p1.pid = 1;
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <main+0x8c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
    p2.pid = 2;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <main+0x90>)
 80005e6:	2202      	movs	r2, #2
 80005e8:	701a      	strb	r2, [r3, #0]
    p3.pid = 3;
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <main+0x94>)
 80005ec:	2203      	movs	r2, #3
 80005ee:	701a      	strb	r2, [r3, #0]

    current_time_ms = 0;
 80005f0:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <main+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
        /* ----- Process Switching ----- */
    switch (scheduler.next_pid){
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <main+0x88>)
 80005f8:	789b      	ldrb	r3, [r3, #2]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d816      	bhi.n	800062c <main+0x80>
 80005fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000604 <main+0x58>)
 8000600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000604:	08000615 	.word	0x08000615
 8000608:	0800061b 	.word	0x0800061b
 800060c:	08000621 	.word	0x08000621
 8000610:	08000627 	.word	0x08000627
        case 0:
            Process_Scheduler();
 8000614:	f000 f8ec 	bl	80007f0 <Process_Scheduler>
            break;
 8000618:	e00b      	b.n	8000632 <main+0x86>

        case 1:
            Process_1();
 800061a:	f000 f965 	bl	80008e8 <Process_1>
            break;
 800061e:	e008      	b.n	8000632 <main+0x86>

        case 2:
            Process_2();
 8000620:	f000 f9ac 	bl	800097c <Process_2>
            break;
 8000624:	e005      	b.n	8000632 <main+0x86>

        case 3:
            Process_3();
 8000626:	f000 f9f5 	bl	8000a14 <Process_3>
            break;
 800062a:	e002      	b.n	8000632 <main+0x86>

        default:
            Process_Scheduler();
 800062c:	f000 f8e0 	bl	80007f0 <Process_Scheduler>
            break;
 8000630:	bf00      	nop
    switch (scheduler.next_pid){
 8000632:	e7e0      	b.n	80005f6 <main+0x4a>
 8000634:	20000228 	.word	0x20000228
 8000638:	20000224 	.word	0x20000224
 800063c:	200001d8 	.word	0x200001d8
 8000640:	20000234 	.word	0x20000234
 8000644:	20000230 	.word	0x20000230

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fdcc 	bl	80021f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <SystemClock_Config+0xb4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <SystemClock_Config+0xb4>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <SystemClock_Config+0xb4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <SystemClock_Config+0xb8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <SystemClock_Config+0xb8>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <SystemClock_Config+0xb8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fe97 	bl	80013ec <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006c4:	f000 fa0c 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f8fa 	bl	80018dc <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ee:	f000 f9f7 	bl	8000ae0 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_TIM10_Init+0x40>)
 800070a:	4a0f      	ldr	r2, [pc, #60]	@ (8000748 <MX_TIM10_Init+0x44>)
 800070c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16-1;
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <MX_TIM10_Init+0x40>)
 8000710:	220f      	movs	r2, #15
 8000712:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_TIM10_Init+0x40>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800071a:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <MX_TIM10_Init+0x40>)
 800071c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000720:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_TIM10_Init+0x40>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_TIM10_Init+0x40>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_TIM10_Init+0x40>)
 8000730:	f001 fa80 	bl	8001c34 <HAL_TIM_Base_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800073a:	f000 f9d1 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200001dc 	.word	0x200001dc
 8000748:	40014400 	.word	0x40014400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <MX_GPIO_Init+0x98>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a1e      	ldr	r2, [pc, #120]	@ (80007e4 <MX_GPIO_Init+0x98>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <MX_GPIO_Init+0x98>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_GPIO_Init+0x98>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a17      	ldr	r2, [pc, #92]	@ (80007e4 <MX_GPIO_Init+0x98>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_GPIO_Init+0x98>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Green_Pin|LED3_Orenge_Pin|LED5_Red_Pin|LED6_Blue_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007a0:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <MX_GPIO_Init+0x9c>)
 80007a2:	f000 fe09 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_User_Pin */
  GPIO_InitStruct.Pin = BTN_User_Pin;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_User_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	@ (80007ec <MX_GPIO_Init+0xa0>)
 80007ba:	f000 fc79 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Green_Pin LED3_Orenge_Pin LED5_Red_Pin LED6_Blue_Pin */
  GPIO_InitStruct.Pin = LED4_Green_Pin|LED3_Orenge_Pin|LED5_Red_Pin|LED6_Blue_Pin;
 80007be:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_GPIO_Init+0x9c>)
 80007d8:	f000 fc6a 	bl	80010b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	40020000 	.word	0x40020000

080007f0 <Process_Scheduler>:

/* USER CODE BEGIN 4 */


/* Process Control Block (PCB) */
void Process_Scheduler (void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	// PCB should NOT be a while loop, it should switch the next process and leave ASAP

    	/* use any HAL_Delay function will cause SW hangs */
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007fa:	4836      	ldr	r0, [pc, #216]	@ (80008d4 <Process_Scheduler+0xe4>)
 80007fc:	f000 fddc 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000806:	4833      	ldr	r0, [pc, #204]	@ (80008d4 <Process_Scheduler+0xe4>)
 8000808:	f000 fdd6 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000812:	4830      	ldr	r0, [pc, #192]	@ (80008d4 <Process_Scheduler+0xe4>)
 8000814:	f000 fdd0 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800081e:	482d      	ldr	r0, [pc, #180]	@ (80008d4 <Process_Scheduler+0xe4>)
 8000820:	f000 fdca 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800082a:	482a      	ldr	r0, [pc, #168]	@ (80008d4 <Process_Scheduler+0xe4>)
 800082c:	f000 fdc4 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000836:	4827      	ldr	r0, [pc, #156]	@ (80008d4 <Process_Scheduler+0xe4>)
 8000838:	f000 fdbe 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000842:	4824      	ldr	r0, [pc, #144]	@ (80008d4 <Process_Scheduler+0xe4>)
 8000844:	f000 fdb8 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084e:	4821      	ldr	r0, [pc, #132]	@ (80008d4 <Process_Scheduler+0xe4>)
 8000850:	f000 fdb2 	bl	80013b8 <HAL_GPIO_WritePin>
        
        if (scheduler.preempt_pid!=0){
 8000854:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <Process_Scheduler+0xe8>)
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d00d      	beq.n	8000878 <Process_Scheduler+0x88>
            scheduler.next_pid = scheduler.preempt_pid;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <Process_Scheduler+0xe8>)
 800085e:	785a      	ldrb	r2, [r3, #1]
 8000860:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <Process_Scheduler+0xe8>)
 8000862:	709a      	strb	r2, [r3, #2]
            scheduler.preempt_pid = 0;
 8000864:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <Process_Scheduler+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	705a      	strb	r2, [r3, #1]

            printf("current process = %d\n", scheduler.next_pid);
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <Process_Scheduler+0xe8>)
 800086c:	789b      	ldrb	r3, [r3, #2]
 800086e:	4619      	mov	r1, r3
 8000870:	481a      	ldr	r0, [pc, #104]	@ (80008dc <Process_Scheduler+0xec>)
 8000872:	f001 fb77 	bl	8001f64 <iprintf>
            return;
 8000876:	e02c      	b.n	80008d2 <Process_Scheduler+0xe2>
        }

        if (current_time_ms % PROCESS_EXE_TIME == 0){
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <Process_Scheduler+0xf0>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <Process_Scheduler+0xf4>)
 800087e:	fba3 1302 	umull	r1, r3, r3, r2
 8000882:	099b      	lsrs	r3, r3, #6
 8000884:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000888:	fb01 f303 	mul.w	r3, r1, r3
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d11f      	bne.n	80008d2 <Process_Scheduler+0xe2>
            scheduler.last_pid = scheduler.cur_pid;                     // record last process
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <Process_Scheduler+0xe8>)
 8000894:	78da      	ldrb	r2, [r3, #3]
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <Process_Scheduler+0xe8>)
 8000898:	711a      	strb	r2, [r3, #4]
            scheduler.next_pid = scheduler.cur_pid+1;                   // move to next process
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <Process_Scheduler+0xe8>)
 800089c:	78db      	ldrb	r3, [r3, #3]
 800089e:	3301      	adds	r3, #1
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <Process_Scheduler+0xe8>)
 80008a4:	709a      	strb	r2, [r3, #2]
            scheduler.cur_pid++;                                  // move to next process
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <Process_Scheduler+0xe8>)
 80008a8:	78db      	ldrb	r3, [r3, #3]
 80008aa:	3301      	adds	r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <Process_Scheduler+0xe8>)
 80008b0:	70da      	strb	r2, [r3, #3]




            // set maximum number of processes
            if (scheduler.next_pid >= MAX_PROCESS_NUM){
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <Process_Scheduler+0xe8>)
 80008b4:	789b      	ldrb	r3, [r3, #2]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d905      	bls.n	80008c6 <Process_Scheduler+0xd6>
                scheduler.cur_pid = 0;
 80008ba:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <Process_Scheduler+0xe8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	70da      	strb	r2, [r3, #3]
                scheduler.next_pid = 0;
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <Process_Scheduler+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	709a      	strb	r2, [r3, #2]
            }
            printf("current process = %d\n", scheduler.next_pid);
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <Process_Scheduler+0xe8>)
 80008c8:	789b      	ldrb	r3, [r3, #2]
 80008ca:	4619      	mov	r1, r3
 80008cc:	4803      	ldr	r0, [pc, #12]	@ (80008dc <Process_Scheduler+0xec>)
 80008ce:	f001 fb49 	bl	8001f64 <iprintf>
        // do I really need priority list???
        // when interrupt, raise a flag in irq handler(Pend SV?), provide PID for request (regist in a struct), leave handler
        // if (flag), process 0 modify its priority (base on urgency level), and clear the flag
        // reset its prority after execution

}
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	20000228 	.word	0x20000228
 80008dc:	08002d10 	.word	0x08002d10
 80008e0:	20000230 	.word	0x20000230
 80008e4:	10624dd3 	.word	0x10624dd3

080008e8 <Process_1>:

void Process_1(void){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
    while(1){
        /* --- p1 indicator --- */
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);    // LED3 PD13
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f4:	481c      	ldr	r0, [pc, #112]	@ (8000968 <Process_1+0x80>)
 80008f6:	f000 fd5f 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);  // LED4 PD12
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000900:	4819      	ldr	r0, [pc, #100]	@ (8000968 <Process_1+0x80>)
 8000902:	f000 fd59 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);  // LED5 PD14
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800090c:	4816      	ldr	r0, [pc, #88]	@ (8000968 <Process_1+0x80>)
 800090e:	f000 fd53 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);  // LED6 PD15
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000918:	4813      	ldr	r0, [pc, #76]	@ (8000968 <Process_1+0x80>)
 800091a:	f000 fd4d 	bl	80013b8 <HAL_GPIO_WritePin>
        printf(" --- Process 1 --- \r\n");
 800091e:	4813      	ldr	r0, [pc, #76]	@ (800096c <Process_1+0x84>)
 8000920:	f001 fb88 	bl	8002034 <puts>

        /* --- main process --- */
        uint8_t p1_var=0;
 8000924:	2300      	movs	r3, #0
 8000926:	71fb      	strb	r3, [r7, #7]

        for (size_t i = 0; i < 0x100; i++){
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	e00d      	b.n	800094a <Process_1+0x62>
            printf("p1_var = %u\r\n", p1_var);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4619      	mov	r1, r3
 8000932:	480f      	ldr	r0, [pc, #60]	@ (8000970 <Process_1+0x88>)
 8000934:	f001 fb16 	bl	8001f64 <iprintf>
            p1_var++;
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	3301      	adds	r3, #1
 800093c:	71fb      	strb	r3, [r7, #7]
            Os_Delay(100);
 800093e:	2064      	movs	r0, #100	@ 0x64
 8000940:	f000 f8b2 	bl	8000aa8 <Os_Delay>
        for (size_t i = 0; i < 0x100; i++){
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2bff      	cmp	r3, #255	@ 0xff
 800094e:	d9ee      	bls.n	800092e <Process_1+0x46>
        }
        

        // usually done by PCB/TCB
        /* check if next process is this process*/
        if (scheduler.next_pid != p1.pid) break;
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <Process_1+0x8c>)
 8000952:	789a      	ldrb	r2, [r3, #2]
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <Process_1+0x90>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	d100      	bne.n	800095e <Process_1+0x76>
    while(1){
 800095c:	e7c7      	b.n	80008ee <Process_1+0x6>
        if (scheduler.next_pid != p1.pid) break;
 800095e:	bf00      	nop
    }
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40020c00 	.word	0x40020c00
 800096c:	08002d28 	.word	0x08002d28
 8000970:	08002d40 	.word	0x08002d40
 8000974:	20000228 	.word	0x20000228
 8000978:	20000224 	.word	0x20000224

0800097c <Process_2>:

void Process_2(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
    while(1){
        /* --- p2 indicator --- */
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);   // LED3 PD13
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000988:	481d      	ldr	r0, [pc, #116]	@ (8000a00 <Process_2+0x84>)
 800098a:	f000 fd15 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);     // LED4 PD12
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000994:	481a      	ldr	r0, [pc, #104]	@ (8000a00 <Process_2+0x84>)
 8000996:	f000 fd0f 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);   // LED5 PD14
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a0:	4817      	ldr	r0, [pc, #92]	@ (8000a00 <Process_2+0x84>)
 80009a2:	f000 fd09 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);   // LED6 PD15
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ac:	4814      	ldr	r0, [pc, #80]	@ (8000a00 <Process_2+0x84>)
 80009ae:	f000 fd03 	bl	80013b8 <HAL_GPIO_WritePin>
        printf(" --- Process 2 --- \r\n");
 80009b2:	4814      	ldr	r0, [pc, #80]	@ (8000a04 <Process_2+0x88>)
 80009b4:	f001 fb3e 	bl	8002034 <puts>

        /* --- main process --- */
        uint16_t p2_var=0x100;
 80009b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009bc:	80fb      	strh	r3, [r7, #6]

        for (size_t i = 0; i < 0x100; i++){
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	e00d      	b.n	80009e0 <Process_2+0x64>
            printf("p2_var = %u\r\n", p2_var);
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	4619      	mov	r1, r3
 80009c8:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <Process_2+0x8c>)
 80009ca:	f001 facb 	bl	8001f64 <iprintf>
            p2_var++;
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	3301      	adds	r3, #1
 80009d2:	80fb      	strh	r3, [r7, #6]
            Os_Delay(100);
 80009d4:	2064      	movs	r0, #100	@ 0x64
 80009d6:	f000 f867 	bl	8000aa8 <Os_Delay>
        for (size_t i = 0; i < 0x100; i++){
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2bff      	cmp	r3, #255	@ 0xff
 80009e4:	d9ee      	bls.n	80009c4 <Process_2+0x48>
        }

        /* check if next process is this process*/
        if (scheduler.next_pid != p2.pid) break;
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <Process_2+0x90>)
 80009e8:	789a      	ldrb	r2, [r3, #2]
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <Process_2+0x94>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d100      	bne.n	80009f4 <Process_2+0x78>
    while(1){
 80009f2:	e7c6      	b.n	8000982 <Process_2+0x6>
        if (scheduler.next_pid != p2.pid) break;
 80009f4:	bf00      	nop
    }
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	08002d50 	.word	0x08002d50
 8000a08:	08002d68 	.word	0x08002d68
 8000a0c:	20000228 	.word	0x20000228
 8000a10:	200001d8 	.word	0x200001d8

08000a14 <Process_3>:
void Process_3(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
    while(1){
        /* --- p3 indicator --- */        
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);  // LED3 PD13
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a20:	481c      	ldr	r0, [pc, #112]	@ (8000a94 <Process_3+0x80>)
 8000a22:	f000 fcc9 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);  // LED4 PD12
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a2c:	4819      	ldr	r0, [pc, #100]	@ (8000a94 <Process_3+0x80>)
 8000a2e:	f000 fcc3 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);    // LED5 PD14
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a38:	4816      	ldr	r0, [pc, #88]	@ (8000a94 <Process_3+0x80>)
 8000a3a:	f000 fcbd 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);    // LED6 PD15
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a44:	4813      	ldr	r0, [pc, #76]	@ (8000a94 <Process_3+0x80>)
 8000a46:	f000 fcb7 	bl	80013b8 <HAL_GPIO_WritePin>
        printf(" --- Process 2 --- \r\n");
 8000a4a:	4813      	ldr	r0, [pc, #76]	@ (8000a98 <Process_3+0x84>)
 8000a4c:	f001 faf2 	bl	8002034 <puts>

        /* --- main process --- */
        uint32_t p3_var=0x10000;
 8000a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a54:	607b      	str	r3, [r7, #4]

        for (size_t i = 0; i < 0x100; i++){
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	e00c      	b.n	8000a76 <Process_3+0x62>
            printf("p3_var = %u\r\n", p3_var);
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	480f      	ldr	r0, [pc, #60]	@ (8000a9c <Process_3+0x88>)
 8000a60:	f001 fa80 	bl	8001f64 <iprintf>
            p3_var++;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3301      	adds	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
            Os_Delay(100);
 8000a6a:	2064      	movs	r0, #100	@ 0x64
 8000a6c:	f000 f81c 	bl	8000aa8 <Os_Delay>
        for (size_t i = 0; i < 0x100; i++){
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2bff      	cmp	r3, #255	@ 0xff
 8000a7a:	d9ef      	bls.n	8000a5c <Process_3+0x48>
        }


        /* check if next process is this process*/
        if (scheduler.next_pid != p3.pid) break;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <Process_3+0x8c>)
 8000a7e:	789a      	ldrb	r2, [r3, #2]
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <Process_3+0x90>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d100      	bne.n	8000a8a <Process_3+0x76>
    while(1){
 8000a88:	e7c7      	b.n	8000a1a <Process_3+0x6>
        if (scheduler.next_pid != p3.pid) break;
 8000a8a:	bf00      	nop
    }
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	08002d50 	.word	0x08002d50
 8000a9c:	08002d78 	.word	0x08002d78
 8000aa0:	20000228 	.word	0x20000228
 8000aa4:	20000234 	.word	0x20000234

08000aa8 <Os_Delay>:

void Os_Delay(uint32_t ms){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    static uint32_t start_time;
    start_time = current_time_ms;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <Os_Delay+0x30>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	@ (8000adc <Os_Delay+0x34>)
 8000ab6:	6013      	str	r3, [r2, #0]
    while((current_time_ms - start_time) < ms){;}
 8000ab8:	bf00      	nop
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <Os_Delay+0x30>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <Os_Delay+0x34>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d8f7      	bhi.n	8000aba <Os_Delay+0x12>

    return;
 8000aca:	bf00      	nop
}
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000230 	.word	0x20000230
 8000adc:	20000084 	.word	0x20000084

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a08      	ldr	r2, [pc, #32]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0b      	ldr	r2, [pc, #44]	@ (8000b78 <HAL_TIM_Base_MspInit+0x3c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d10d      	bne.n	8000b6a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_TIM_Base_MspInit+0x40>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	4a09      	ldr	r2, [pc, #36]	@ (8000b7c <HAL_TIM_Base_MspInit+0x40>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5e:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <HAL_TIM_Base_MspInit+0x40>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40014400 	.word	0x40014400
 8000b7c:	40023800 	.word	0x40023800

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    
    current_time_ms++;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <SysTick_Handler+0x1c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <SysTick_Handler+0x1c>)
 8000be0:	6013      	str	r3, [r2, #0]
    Process_Scheduler();
 8000be2:	f7ff fe05 	bl	80007f0 <Process_Scheduler>
    // printf("current time ms = %d\n", current_time_ms);
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 f95d 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000230 	.word	0x20000230

08000bf4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bfc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d013      	beq.n	8000c34 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c0c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00b      	beq.n	8000c34 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c1c:	e000      	b.n	8000c20 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c1e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f9      	beq.n	8000c1e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c2a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e00a      	b.n	8000c6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c54:	f3af 8000 	nop.w
 8000c58:	4601      	mov	r1, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	60ba      	str	r2, [r7, #8]
 8000c60:	b2ca      	uxtb	r2, r1
 8000c62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3301      	adds	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	dbf0      	blt.n	8000c54 <_read+0x12>
  }

  return len;
 8000c72:	687b      	ldr	r3, [r7, #4]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e009      	b.n	8000ca2 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	60ba      	str	r2, [r7, #8]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ffac 	bl	8000bf4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dbf1      	blt.n	8000c8e <_write+0x12>
  }
  return len;
 8000caa:	687b      	ldr	r3, [r7, #4]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_close>:

int _close(int file)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cdc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_isatty>:

int _isatty(int file)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf4:	2301      	movs	r3, #1
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b085      	sub	sp, #20
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f001 faa0 	bl	8002290 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000088 	.word	0x20000088
 8000d84:	20000240 	.word	0x20000240

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f001 fa5f 	bl	800229c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fbe5 	bl	80005ac <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000df0:	08002ddc 	.word	0x08002ddc
  ldr r2, =_sbss
 8000df4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000df8:	2000023c 	.word	0x2000023c

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f90d 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fe5a 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f917 	bl	8001096 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f8ed 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000238 	.word	0x20000238

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000238 	.word	0x20000238

08000ee4 <__NVIC_SetPriorityGrouping>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_SetPriority>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff47 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff5c 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffb0 	bl	8001004 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e159      	b.n	8001380 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8148 	bne.w	800137a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80a2 	beq.w	800137a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <HAL_GPIO_Init+0x2e8>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <HAL_GPIO_Init+0x2e8>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001244:	6453      	str	r3, [r2, #68]	@ 0x44
 8001246:	4b54      	ldr	r3, [pc, #336]	@ (8001398 <HAL_GPIO_Init+0x2e8>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001252:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_GPIO_Init+0x2ec>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a49      	ldr	r2, [pc, #292]	@ (80013a0 <HAL_GPIO_Init+0x2f0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x202>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a48      	ldr	r2, [pc, #288]	@ (80013a4 <HAL_GPIO_Init+0x2f4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x1fe>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a47      	ldr	r2, [pc, #284]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x1fa>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a46      	ldr	r2, [pc, #280]	@ (80013ac <HAL_GPIO_Init+0x2fc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x1f6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a45      	ldr	r2, [pc, #276]	@ (80013b0 <HAL_GPIO_Init+0x300>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x1f2>
 800129e:	2304      	movs	r3, #4
 80012a0:	e008      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012b2:	2300      	movs	r3, #0
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4093      	lsls	r3, r2
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c4:	4935      	ldr	r1, [pc, #212]	@ (800139c <HAL_GPIO_Init+0x2ec>)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b38      	ldr	r3, [pc, #224]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f6:	4a2f      	ldr	r2, [pc, #188]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001320:	4a24      	ldr	r2, [pc, #144]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001326:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134a:	4a1a      	ldr	r2, [pc, #104]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001374:	4a0f      	ldr	r2, [pc, #60]	@ (80013b4 <HAL_GPIO_Init+0x304>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3301      	adds	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	f67f aea2 	bls.w	80010cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e267      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d075      	beq.n	80014f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800140a:	4b88      	ldr	r3, [pc, #544]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b04      	cmp	r3, #4
 8001414:	d00c      	beq.n	8001430 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001416:	4b85      	ldr	r3, [pc, #532]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800141e:	2b08      	cmp	r3, #8
 8001420:	d112      	bne.n	8001448 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001422:	4b82      	ldr	r3, [pc, #520]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800142e:	d10b      	bne.n	8001448 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	4b7e      	ldr	r3, [pc, #504]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d05b      	beq.n	80014f4 <HAL_RCC_OscConfig+0x108>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d157      	bne.n	80014f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e242      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001450:	d106      	bne.n	8001460 <HAL_RCC_OscConfig+0x74>
 8001452:	4b76      	ldr	r3, [pc, #472]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a75      	ldr	r2, [pc, #468]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01d      	b.n	800149c <HAL_RCC_OscConfig+0xb0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x98>
 800146a:	4b70      	ldr	r3, [pc, #448]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a6f      	ldr	r2, [pc, #444]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b6d      	ldr	r3, [pc, #436]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6c      	ldr	r2, [pc, #432]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xb0>
 8001484:	4b69      	ldr	r3, [pc, #420]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a68      	ldr	r2, [pc, #416]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b66      	ldr	r3, [pc, #408]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a65      	ldr	r2, [pc, #404]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800149a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fd12 	bl	8000ecc <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fd0e 	bl	8000ecc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	@ 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e207      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b5b      	ldr	r3, [pc, #364]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0xc0>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fcfe 	bl	8000ecc <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fcfa 	bl	8000ecc <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1f3      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	4b51      	ldr	r3, [pc, #324]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0xe8>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d063      	beq.n	80015ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001502:	4b4a      	ldr	r3, [pc, #296]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150e:	4b47      	ldr	r3, [pc, #284]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001516:	2b08      	cmp	r3, #8
 8001518:	d11c      	bne.n	8001554 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b44      	ldr	r3, [pc, #272]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	4b41      	ldr	r3, [pc, #260]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x152>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1c7      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b3b      	ldr	r3, [pc, #236]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4937      	ldr	r1, [pc, #220]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	e03a      	b.n	80015ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155c:	4b34      	ldr	r3, [pc, #208]	@ (8001630 <HAL_RCC_OscConfig+0x244>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fcb3 	bl	8000ecc <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fcaf 	bl	8000ecc <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1a8      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b28      	ldr	r3, [pc, #160]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4925      	ldr	r1, [pc, #148]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <HAL_RCC_OscConfig+0x244>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fc92 	bl	8000ecc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc8e 	bl	8000ecc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e187      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d036      	beq.n	8001644 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d016      	beq.n	800160c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_RCC_OscConfig+0x248>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fc72 	bl	8000ecc <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fc6e 	bl	8000ecc <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e167      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <HAL_RCC_OscConfig+0x240>)
 8001600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x200>
 800160a:	e01b      	b.n	8001644 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_RCC_OscConfig+0x248>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff fc5b 	bl	8000ecc <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	e00e      	b.n	8001638 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fc57 	bl	8000ecc <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d907      	bls.n	8001638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e150      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
 800162c:	40023800 	.word	0x40023800
 8001630:	42470000 	.word	0x42470000
 8001634:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	4b88      	ldr	r3, [pc, #544]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 800163a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ea      	bne.n	800161a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8097 	beq.w	8001780 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001656:	4b81      	ldr	r3, [pc, #516]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10f      	bne.n	8001682 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b7d      	ldr	r3, [pc, #500]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	4a7c      	ldr	r2, [pc, #496]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001670:	6413      	str	r3, [r2, #64]	@ 0x40
 8001672:	4b7a      	ldr	r3, [pc, #488]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b77      	ldr	r3, [pc, #476]	@ (8001860 <HAL_RCC_OscConfig+0x474>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168e:	4b74      	ldr	r3, [pc, #464]	@ (8001860 <HAL_RCC_OscConfig+0x474>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a73      	ldr	r2, [pc, #460]	@ (8001860 <HAL_RCC_OscConfig+0x474>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff fc17 	bl	8000ecc <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff fc13 	bl	8000ecc <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e10c      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001860 <HAL_RCC_OscConfig+0x474>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x2ea>
 80016c8:	4b64      	ldr	r3, [pc, #400]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016cc:	4a63      	ldr	r2, [pc, #396]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d4:	e01c      	b.n	8001710 <HAL_RCC_OscConfig+0x324>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x30c>
 80016de:	4b5f      	ldr	r3, [pc, #380]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e2:	4a5e      	ldr	r2, [pc, #376]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ea:	4b5c      	ldr	r3, [pc, #368]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ee:	4a5b      	ldr	r2, [pc, #364]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0x324>
 80016f8:	4b58      	ldr	r3, [pc, #352]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fc:	4a57      	ldr	r2, [pc, #348]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	@ 0x70
 8001704:	4b55      	ldr	r3, [pc, #340]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	4a54      	ldr	r2, [pc, #336]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 800170a:	f023 0304 	bic.w	r3, r3, #4
 800170e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d015      	beq.n	8001744 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fbd8 	bl	8000ecc <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff fbd4 	bl	8000ecc <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0cb      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	4b49      	ldr	r3, [pc, #292]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0ee      	beq.n	8001720 <HAL_RCC_OscConfig+0x334>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff fbc2 	bl	8000ecc <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff fbbe 	bl	8000ecc <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e0b5      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001762:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1ee      	bne.n	800174c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b39      	ldr	r3, [pc, #228]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	4a38      	ldr	r2, [pc, #224]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 800177a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800177e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80a1 	beq.w	80018cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800178a:	4b34      	ldr	r3, [pc, #208]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b08      	cmp	r3, #8
 8001794:	d05c      	beq.n	8001850 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d141      	bne.n	8001822 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179e:	4b31      	ldr	r3, [pc, #196]	@ (8001864 <HAL_RCC_OscConfig+0x478>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb92 	bl	8000ecc <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff fb8e 	bl	8000ecc <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e087      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	4b27      	ldr	r3, [pc, #156]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69da      	ldr	r2, [r3, #28]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	019b      	lsls	r3, r3, #6
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	3b01      	subs	r3, #1
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	491b      	ldr	r1, [pc, #108]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_RCC_OscConfig+0x478>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fb67 	bl	8000ecc <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff fb63 	bl	8000ecc <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e05c      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x416>
 8001820:	e054      	b.n	80018cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_RCC_OscConfig+0x478>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fb50 	bl	8000ecc <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fb4c 	bl	8000ecc <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e045      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_RCC_OscConfig+0x470>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x444>
 800184e:	e03d      	b.n	80018cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d107      	bne.n	8001868 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e038      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000
 8001864:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HAL_RCC_OscConfig+0x4ec>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d028      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d121      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d11a      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001898:	4013      	ands	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800189e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d111      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	3b01      	subs	r3, #1
 80018b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d107      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0cc      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	4b68      	ldr	r3, [pc, #416]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d90c      	bls.n	8001918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b65      	ldr	r3, [pc, #404]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b63      	ldr	r3, [pc, #396]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0b8      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001930:	4b59      	ldr	r3, [pc, #356]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a58      	ldr	r2, [pc, #352]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800193a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001948:	4b53      	ldr	r3, [pc, #332]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a52      	ldr	r2, [pc, #328]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b50      	ldr	r3, [pc, #320]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	494d      	ldr	r1, [pc, #308]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d044      	beq.n	80019fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b47      	ldr	r3, [pc, #284]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d119      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e07f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d003      	beq.n	800199a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e067      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ba:	4b37      	ldr	r3, [pc, #220]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f023 0203 	bic.w	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4934      	ldr	r1, [pc, #208]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff fa7e 	bl	8000ecc <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7ff fa7a 	bl	8000ecc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e04f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 020c 	and.w	r2, r3, #12
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1eb      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d20c      	bcs.n	8001a24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e032      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4916      	ldr	r1, [pc, #88]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4e:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	490e      	ldr	r1, [pc, #56]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a62:	f000 f821 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	490a      	ldr	r1, [pc, #40]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	5ccb      	ldrb	r3, [r1, r3]
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	4a09      	ldr	r2, [pc, #36]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f9de 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	08002d88 	.word	0x08002d88
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b090      	sub	sp, #64	@ 0x40
 8001aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac0:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d00d      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	f200 80a1 	bhi.w	8001c14 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x34>
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ada:	e09b      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b53      	ldr	r3, [pc, #332]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ae0:	e09b      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae2:	4b53      	ldr	r3, [pc, #332]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ae6:	e098      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001af0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af2:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d028      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afe:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	2200      	movs	r2, #0
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b10:	2100      	movs	r1, #0
 8001b12:	4b47      	ldr	r3, [pc, #284]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b14:	fb03 f201 	mul.w	r2, r3, r1
 8001b18:	2300      	movs	r3, #0
 8001b1a:	fb00 f303 	mul.w	r3, r0, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a43      	ldr	r2, [pc, #268]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b22:	fba0 1202 	umull	r1, r2, r0, r2
 8001b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b28:	460a      	mov	r2, r1
 8001b2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b2e:	4413      	add	r3, r2
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b34:	2200      	movs	r2, #0
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	61fa      	str	r2, [r7, #28]
 8001b3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b42:	f7fe fb9d 	bl	8000280 <__aeabi_uldivmod>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b4e:	e053      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b50:	4b35      	ldr	r3, [pc, #212]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	2200      	movs	r2, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	617a      	str	r2, [r7, #20]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b62:	f04f 0b00 	mov.w	fp, #0
 8001b66:	4652      	mov	r2, sl
 8001b68:	465b      	mov	r3, fp
 8001b6a:	f04f 0000 	mov.w	r0, #0
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	0159      	lsls	r1, r3, #5
 8001b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b78:	0150      	lsls	r0, r2, #5
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b82:	eb63 090b 	sbc.w	r9, r3, fp
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b9a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b9e:	eb63 0509 	sbc.w	r5, r3, r9
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	00eb      	lsls	r3, r5, #3
 8001bac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb0:	00e2      	lsls	r2, r4, #3
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	461d      	mov	r5, r3
 8001bb6:	eb14 030a 	adds.w	r3, r4, sl
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	eb45 030b 	adc.w	r3, r5, fp
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bce:	4629      	mov	r1, r5
 8001bd0:	028b      	lsls	r3, r1, #10
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd8:	4621      	mov	r1, r4
 8001bda:	028a      	lsls	r2, r1, #10
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be2:	2200      	movs	r2, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	60fa      	str	r2, [r7, #12]
 8001be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bec:	f7fe fb48 	bl	8000280 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	3301      	adds	r3, #1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c12:	e002      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3740      	adds	r7, #64	@ 0x40
 8001c20:	46bd      	mov	sp, r7
 8001c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	017d7840 	.word	0x017d7840

08001c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e041      	b.n	8001cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe ff6e 	bl	8000b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f000 f82e 	bl	8001cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a37      	ldr	r2, [pc, #220]	@ (8001dc4 <TIM_Base_SetConfig+0xf0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d00f      	beq.n	8001d0c <TIM_Base_SetConfig+0x38>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf2:	d00b      	beq.n	8001d0c <TIM_Base_SetConfig+0x38>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a34      	ldr	r2, [pc, #208]	@ (8001dc8 <TIM_Base_SetConfig+0xf4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d007      	beq.n	8001d0c <TIM_Base_SetConfig+0x38>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a33      	ldr	r2, [pc, #204]	@ (8001dcc <TIM_Base_SetConfig+0xf8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d003      	beq.n	8001d0c <TIM_Base_SetConfig+0x38>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a32      	ldr	r2, [pc, #200]	@ (8001dd0 <TIM_Base_SetConfig+0xfc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d108      	bne.n	8001d1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a28      	ldr	r2, [pc, #160]	@ (8001dc4 <TIM_Base_SetConfig+0xf0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01b      	beq.n	8001d5e <TIM_Base_SetConfig+0x8a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d2c:	d017      	beq.n	8001d5e <TIM_Base_SetConfig+0x8a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a25      	ldr	r2, [pc, #148]	@ (8001dc8 <TIM_Base_SetConfig+0xf4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <TIM_Base_SetConfig+0x8a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a24      	ldr	r2, [pc, #144]	@ (8001dcc <TIM_Base_SetConfig+0xf8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00f      	beq.n	8001d5e <TIM_Base_SetConfig+0x8a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a23      	ldr	r2, [pc, #140]	@ (8001dd0 <TIM_Base_SetConfig+0xfc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00b      	beq.n	8001d5e <TIM_Base_SetConfig+0x8a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a22      	ldr	r2, [pc, #136]	@ (8001dd4 <TIM_Base_SetConfig+0x100>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d007      	beq.n	8001d5e <TIM_Base_SetConfig+0x8a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a21      	ldr	r2, [pc, #132]	@ (8001dd8 <TIM_Base_SetConfig+0x104>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d003      	beq.n	8001d5e <TIM_Base_SetConfig+0x8a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a20      	ldr	r2, [pc, #128]	@ (8001ddc <TIM_Base_SetConfig+0x108>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d108      	bne.n	8001d70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <TIM_Base_SetConfig+0xf0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d103      	bne.n	8001d9e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f043 0204 	orr.w	r2, r3, #4
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	40000c00 	.word	0x40000c00
 8001dd4:	40014000 	.word	0x40014000
 8001dd8:	40014400 	.word	0x40014400
 8001ddc:	40014800 	.word	0x40014800

08001de0 <std>:
 8001de0:	2300      	movs	r3, #0
 8001de2:	b510      	push	{r4, lr}
 8001de4:	4604      	mov	r4, r0
 8001de6:	e9c0 3300 	strd	r3, r3, [r0]
 8001dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dee:	6083      	str	r3, [r0, #8]
 8001df0:	8181      	strh	r1, [r0, #12]
 8001df2:	6643      	str	r3, [r0, #100]	@ 0x64
 8001df4:	81c2      	strh	r2, [r0, #14]
 8001df6:	6183      	str	r3, [r0, #24]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	305c      	adds	r0, #92	@ 0x5c
 8001dfe:	f000 f9f9 	bl	80021f4 <memset>
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <std+0x58>)
 8001e04:	6263      	str	r3, [r4, #36]	@ 0x24
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <std+0x5c>)
 8001e08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <std+0x60>)
 8001e0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <std+0x64>)
 8001e10:	6323      	str	r3, [r4, #48]	@ 0x30
 8001e12:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <std+0x68>)
 8001e14:	6224      	str	r4, [r4, #32]
 8001e16:	429c      	cmp	r4, r3
 8001e18:	d006      	beq.n	8001e28 <std+0x48>
 8001e1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001e1e:	4294      	cmp	r4, r2
 8001e20:	d002      	beq.n	8001e28 <std+0x48>
 8001e22:	33d0      	adds	r3, #208	@ 0xd0
 8001e24:	429c      	cmp	r4, r3
 8001e26:	d105      	bne.n	8001e34 <std+0x54>
 8001e28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e30:	f000 ba58 	b.w	80022e4 <__retarget_lock_init_recursive>
 8001e34:	bd10      	pop	{r4, pc}
 8001e36:	bf00      	nop
 8001e38:	08002045 	.word	0x08002045
 8001e3c:	08002067 	.word	0x08002067
 8001e40:	0800209f 	.word	0x0800209f
 8001e44:	080020c3 	.word	0x080020c3
 8001e48:	2000008c 	.word	0x2000008c

08001e4c <stdio_exit_handler>:
 8001e4c:	4a02      	ldr	r2, [pc, #8]	@ (8001e58 <stdio_exit_handler+0xc>)
 8001e4e:	4903      	ldr	r1, [pc, #12]	@ (8001e5c <stdio_exit_handler+0x10>)
 8001e50:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <stdio_exit_handler+0x14>)
 8001e52:	f000 b869 	b.w	8001f28 <_fwalk_sglue>
 8001e56:	bf00      	nop
 8001e58:	2000000c 	.word	0x2000000c
 8001e5c:	08002b81 	.word	0x08002b81
 8001e60:	2000001c 	.word	0x2000001c

08001e64 <cleanup_stdio>:
 8001e64:	6841      	ldr	r1, [r0, #4]
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <cleanup_stdio+0x34>)
 8001e68:	4299      	cmp	r1, r3
 8001e6a:	b510      	push	{r4, lr}
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	d001      	beq.n	8001e74 <cleanup_stdio+0x10>
 8001e70:	f000 fe86 	bl	8002b80 <_fflush_r>
 8001e74:	68a1      	ldr	r1, [r4, #8]
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <cleanup_stdio+0x38>)
 8001e78:	4299      	cmp	r1, r3
 8001e7a:	d002      	beq.n	8001e82 <cleanup_stdio+0x1e>
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f000 fe7f 	bl	8002b80 <_fflush_r>
 8001e82:	68e1      	ldr	r1, [r4, #12]
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <cleanup_stdio+0x3c>)
 8001e86:	4299      	cmp	r1, r3
 8001e88:	d004      	beq.n	8001e94 <cleanup_stdio+0x30>
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e90:	f000 be76 	b.w	8002b80 <_fflush_r>
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	bf00      	nop
 8001e98:	2000008c 	.word	0x2000008c
 8001e9c:	200000f4 	.word	0x200000f4
 8001ea0:	2000015c 	.word	0x2000015c

08001ea4 <global_stdio_init.part.0>:
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <global_stdio_init.part.0+0x30>)
 8001ea8:	4c0b      	ldr	r4, [pc, #44]	@ (8001ed8 <global_stdio_init.part.0+0x34>)
 8001eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8001edc <global_stdio_init.part.0+0x38>)
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	4620      	mov	r0, r4
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	f7ff ff94 	bl	8001de0 <std>
 8001eb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2109      	movs	r1, #9
 8001ec0:	f7ff ff8e 	bl	8001de0 <std>
 8001ec4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001ec8:	2202      	movs	r2, #2
 8001eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ece:	2112      	movs	r1, #18
 8001ed0:	f7ff bf86 	b.w	8001de0 <std>
 8001ed4:	200001c4 	.word	0x200001c4
 8001ed8:	2000008c 	.word	0x2000008c
 8001edc:	08001e4d 	.word	0x08001e4d

08001ee0 <__sfp_lock_acquire>:
 8001ee0:	4801      	ldr	r0, [pc, #4]	@ (8001ee8 <__sfp_lock_acquire+0x8>)
 8001ee2:	f000 ba00 	b.w	80022e6 <__retarget_lock_acquire_recursive>
 8001ee6:	bf00      	nop
 8001ee8:	200001cd 	.word	0x200001cd

08001eec <__sfp_lock_release>:
 8001eec:	4801      	ldr	r0, [pc, #4]	@ (8001ef4 <__sfp_lock_release+0x8>)
 8001eee:	f000 b9fb 	b.w	80022e8 <__retarget_lock_release_recursive>
 8001ef2:	bf00      	nop
 8001ef4:	200001cd 	.word	0x200001cd

08001ef8 <__sinit>:
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	4604      	mov	r4, r0
 8001efc:	f7ff fff0 	bl	8001ee0 <__sfp_lock_acquire>
 8001f00:	6a23      	ldr	r3, [r4, #32]
 8001f02:	b11b      	cbz	r3, 8001f0c <__sinit+0x14>
 8001f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f08:	f7ff bff0 	b.w	8001eec <__sfp_lock_release>
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <__sinit+0x28>)
 8001f0e:	6223      	str	r3, [r4, #32]
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <__sinit+0x2c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f5      	bne.n	8001f04 <__sinit+0xc>
 8001f18:	f7ff ffc4 	bl	8001ea4 <global_stdio_init.part.0>
 8001f1c:	e7f2      	b.n	8001f04 <__sinit+0xc>
 8001f1e:	bf00      	nop
 8001f20:	08001e65 	.word	0x08001e65
 8001f24:	200001c4 	.word	0x200001c4

08001f28 <_fwalk_sglue>:
 8001f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f2c:	4607      	mov	r7, r0
 8001f2e:	4688      	mov	r8, r1
 8001f30:	4614      	mov	r4, r2
 8001f32:	2600      	movs	r6, #0
 8001f34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f38:	f1b9 0901 	subs.w	r9, r9, #1
 8001f3c:	d505      	bpl.n	8001f4a <_fwalk_sglue+0x22>
 8001f3e:	6824      	ldr	r4, [r4, #0]
 8001f40:	2c00      	cmp	r4, #0
 8001f42:	d1f7      	bne.n	8001f34 <_fwalk_sglue+0xc>
 8001f44:	4630      	mov	r0, r6
 8001f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f4a:	89ab      	ldrh	r3, [r5, #12]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d907      	bls.n	8001f60 <_fwalk_sglue+0x38>
 8001f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f54:	3301      	adds	r3, #1
 8001f56:	d003      	beq.n	8001f60 <_fwalk_sglue+0x38>
 8001f58:	4629      	mov	r1, r5
 8001f5a:	4638      	mov	r0, r7
 8001f5c:	47c0      	blx	r8
 8001f5e:	4306      	orrs	r6, r0
 8001f60:	3568      	adds	r5, #104	@ 0x68
 8001f62:	e7e9      	b.n	8001f38 <_fwalk_sglue+0x10>

08001f64 <iprintf>:
 8001f64:	b40f      	push	{r0, r1, r2, r3}
 8001f66:	b507      	push	{r0, r1, r2, lr}
 8001f68:	4906      	ldr	r1, [pc, #24]	@ (8001f84 <iprintf+0x20>)
 8001f6a:	ab04      	add	r3, sp, #16
 8001f6c:	6808      	ldr	r0, [r1, #0]
 8001f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f72:	6881      	ldr	r1, [r0, #8]
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	f000 fadb 	bl	8002530 <_vfiprintf_r>
 8001f7a:	b003      	add	sp, #12
 8001f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f80:	b004      	add	sp, #16
 8001f82:	4770      	bx	lr
 8001f84:	20000018 	.word	0x20000018

08001f88 <_puts_r>:
 8001f88:	6a03      	ldr	r3, [r0, #32]
 8001f8a:	b570      	push	{r4, r5, r6, lr}
 8001f8c:	6884      	ldr	r4, [r0, #8]
 8001f8e:	4605      	mov	r5, r0
 8001f90:	460e      	mov	r6, r1
 8001f92:	b90b      	cbnz	r3, 8001f98 <_puts_r+0x10>
 8001f94:	f7ff ffb0 	bl	8001ef8 <__sinit>
 8001f98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f9a:	07db      	lsls	r3, r3, #31
 8001f9c:	d405      	bmi.n	8001faa <_puts_r+0x22>
 8001f9e:	89a3      	ldrh	r3, [r4, #12]
 8001fa0:	0598      	lsls	r0, r3, #22
 8001fa2:	d402      	bmi.n	8001faa <_puts_r+0x22>
 8001fa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001fa6:	f000 f99e 	bl	80022e6 <__retarget_lock_acquire_recursive>
 8001faa:	89a3      	ldrh	r3, [r4, #12]
 8001fac:	0719      	lsls	r1, r3, #28
 8001fae:	d502      	bpl.n	8001fb6 <_puts_r+0x2e>
 8001fb0:	6923      	ldr	r3, [r4, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d135      	bne.n	8002022 <_puts_r+0x9a>
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f000 f8c5 	bl	8002148 <__swsetup_r>
 8001fbe:	b380      	cbz	r0, 8002022 <_puts_r+0x9a>
 8001fc0:	f04f 35ff 	mov.w	r5, #4294967295
 8001fc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001fc6:	07da      	lsls	r2, r3, #31
 8001fc8:	d405      	bmi.n	8001fd6 <_puts_r+0x4e>
 8001fca:	89a3      	ldrh	r3, [r4, #12]
 8001fcc:	059b      	lsls	r3, r3, #22
 8001fce:	d402      	bmi.n	8001fd6 <_puts_r+0x4e>
 8001fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001fd2:	f000 f989 	bl	80022e8 <__retarget_lock_release_recursive>
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	bd70      	pop	{r4, r5, r6, pc}
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	da04      	bge.n	8001fe8 <_puts_r+0x60>
 8001fde:	69a2      	ldr	r2, [r4, #24]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dc17      	bgt.n	8002014 <_puts_r+0x8c>
 8001fe4:	290a      	cmp	r1, #10
 8001fe6:	d015      	beq.n	8002014 <_puts_r+0x8c>
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	6022      	str	r2, [r4, #0]
 8001fee:	7019      	strb	r1, [r3, #0]
 8001ff0:	68a3      	ldr	r3, [r4, #8]
 8001ff2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	60a3      	str	r3, [r4, #8]
 8001ffa:	2900      	cmp	r1, #0
 8001ffc:	d1ed      	bne.n	8001fda <_puts_r+0x52>
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da11      	bge.n	8002026 <_puts_r+0x9e>
 8002002:	4622      	mov	r2, r4
 8002004:	210a      	movs	r1, #10
 8002006:	4628      	mov	r0, r5
 8002008:	f000 f85f 	bl	80020ca <__swbuf_r>
 800200c:	3001      	adds	r0, #1
 800200e:	d0d7      	beq.n	8001fc0 <_puts_r+0x38>
 8002010:	250a      	movs	r5, #10
 8002012:	e7d7      	b.n	8001fc4 <_puts_r+0x3c>
 8002014:	4622      	mov	r2, r4
 8002016:	4628      	mov	r0, r5
 8002018:	f000 f857 	bl	80020ca <__swbuf_r>
 800201c:	3001      	adds	r0, #1
 800201e:	d1e7      	bne.n	8001ff0 <_puts_r+0x68>
 8002020:	e7ce      	b.n	8001fc0 <_puts_r+0x38>
 8002022:	3e01      	subs	r6, #1
 8002024:	e7e4      	b.n	8001ff0 <_puts_r+0x68>
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	6022      	str	r2, [r4, #0]
 800202c:	220a      	movs	r2, #10
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e7ee      	b.n	8002010 <_puts_r+0x88>
	...

08002034 <puts>:
 8002034:	4b02      	ldr	r3, [pc, #8]	@ (8002040 <puts+0xc>)
 8002036:	4601      	mov	r1, r0
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	f7ff bfa5 	b.w	8001f88 <_puts_r>
 800203e:	bf00      	nop
 8002040:	20000018 	.word	0x20000018

08002044 <__sread>:
 8002044:	b510      	push	{r4, lr}
 8002046:	460c      	mov	r4, r1
 8002048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800204c:	f000 f8fc 	bl	8002248 <_read_r>
 8002050:	2800      	cmp	r0, #0
 8002052:	bfab      	itete	ge
 8002054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002056:	89a3      	ldrhlt	r3, [r4, #12]
 8002058:	181b      	addge	r3, r3, r0
 800205a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800205e:	bfac      	ite	ge
 8002060:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002062:	81a3      	strhlt	r3, [r4, #12]
 8002064:	bd10      	pop	{r4, pc}

08002066 <__swrite>:
 8002066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800206a:	461f      	mov	r7, r3
 800206c:	898b      	ldrh	r3, [r1, #12]
 800206e:	05db      	lsls	r3, r3, #23
 8002070:	4605      	mov	r5, r0
 8002072:	460c      	mov	r4, r1
 8002074:	4616      	mov	r6, r2
 8002076:	d505      	bpl.n	8002084 <__swrite+0x1e>
 8002078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800207c:	2302      	movs	r3, #2
 800207e:	2200      	movs	r2, #0
 8002080:	f000 f8d0 	bl	8002224 <_lseek_r>
 8002084:	89a3      	ldrh	r3, [r4, #12]
 8002086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800208a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800208e:	81a3      	strh	r3, [r4, #12]
 8002090:	4632      	mov	r2, r6
 8002092:	463b      	mov	r3, r7
 8002094:	4628      	mov	r0, r5
 8002096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800209a:	f000 b8e7 	b.w	800226c <_write_r>

0800209e <__sseek>:
 800209e:	b510      	push	{r4, lr}
 80020a0:	460c      	mov	r4, r1
 80020a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a6:	f000 f8bd 	bl	8002224 <_lseek_r>
 80020aa:	1c43      	adds	r3, r0, #1
 80020ac:	89a3      	ldrh	r3, [r4, #12]
 80020ae:	bf15      	itete	ne
 80020b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80020b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80020b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80020ba:	81a3      	strheq	r3, [r4, #12]
 80020bc:	bf18      	it	ne
 80020be:	81a3      	strhne	r3, [r4, #12]
 80020c0:	bd10      	pop	{r4, pc}

080020c2 <__sclose>:
 80020c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020c6:	f000 b89d 	b.w	8002204 <_close_r>

080020ca <__swbuf_r>:
 80020ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020cc:	460e      	mov	r6, r1
 80020ce:	4614      	mov	r4, r2
 80020d0:	4605      	mov	r5, r0
 80020d2:	b118      	cbz	r0, 80020dc <__swbuf_r+0x12>
 80020d4:	6a03      	ldr	r3, [r0, #32]
 80020d6:	b90b      	cbnz	r3, 80020dc <__swbuf_r+0x12>
 80020d8:	f7ff ff0e 	bl	8001ef8 <__sinit>
 80020dc:	69a3      	ldr	r3, [r4, #24]
 80020de:	60a3      	str	r3, [r4, #8]
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	071a      	lsls	r2, r3, #28
 80020e4:	d501      	bpl.n	80020ea <__swbuf_r+0x20>
 80020e6:	6923      	ldr	r3, [r4, #16]
 80020e8:	b943      	cbnz	r3, 80020fc <__swbuf_r+0x32>
 80020ea:	4621      	mov	r1, r4
 80020ec:	4628      	mov	r0, r5
 80020ee:	f000 f82b 	bl	8002148 <__swsetup_r>
 80020f2:	b118      	cbz	r0, 80020fc <__swbuf_r+0x32>
 80020f4:	f04f 37ff 	mov.w	r7, #4294967295
 80020f8:	4638      	mov	r0, r7
 80020fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	6922      	ldr	r2, [r4, #16]
 8002100:	1a98      	subs	r0, r3, r2
 8002102:	6963      	ldr	r3, [r4, #20]
 8002104:	b2f6      	uxtb	r6, r6
 8002106:	4283      	cmp	r3, r0
 8002108:	4637      	mov	r7, r6
 800210a:	dc05      	bgt.n	8002118 <__swbuf_r+0x4e>
 800210c:	4621      	mov	r1, r4
 800210e:	4628      	mov	r0, r5
 8002110:	f000 fd36 	bl	8002b80 <_fflush_r>
 8002114:	2800      	cmp	r0, #0
 8002116:	d1ed      	bne.n	80020f4 <__swbuf_r+0x2a>
 8002118:	68a3      	ldr	r3, [r4, #8]
 800211a:	3b01      	subs	r3, #1
 800211c:	60a3      	str	r3, [r4, #8]
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	6022      	str	r2, [r4, #0]
 8002124:	701e      	strb	r6, [r3, #0]
 8002126:	6962      	ldr	r2, [r4, #20]
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	429a      	cmp	r2, r3
 800212c:	d004      	beq.n	8002138 <__swbuf_r+0x6e>
 800212e:	89a3      	ldrh	r3, [r4, #12]
 8002130:	07db      	lsls	r3, r3, #31
 8002132:	d5e1      	bpl.n	80020f8 <__swbuf_r+0x2e>
 8002134:	2e0a      	cmp	r6, #10
 8002136:	d1df      	bne.n	80020f8 <__swbuf_r+0x2e>
 8002138:	4621      	mov	r1, r4
 800213a:	4628      	mov	r0, r5
 800213c:	f000 fd20 	bl	8002b80 <_fflush_r>
 8002140:	2800      	cmp	r0, #0
 8002142:	d0d9      	beq.n	80020f8 <__swbuf_r+0x2e>
 8002144:	e7d6      	b.n	80020f4 <__swbuf_r+0x2a>
	...

08002148 <__swsetup_r>:
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	4b29      	ldr	r3, [pc, #164]	@ (80021f0 <__swsetup_r+0xa8>)
 800214c:	4605      	mov	r5, r0
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	460c      	mov	r4, r1
 8002152:	b118      	cbz	r0, 800215c <__swsetup_r+0x14>
 8002154:	6a03      	ldr	r3, [r0, #32]
 8002156:	b90b      	cbnz	r3, 800215c <__swsetup_r+0x14>
 8002158:	f7ff fece 	bl	8001ef8 <__sinit>
 800215c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002160:	0719      	lsls	r1, r3, #28
 8002162:	d422      	bmi.n	80021aa <__swsetup_r+0x62>
 8002164:	06da      	lsls	r2, r3, #27
 8002166:	d407      	bmi.n	8002178 <__swsetup_r+0x30>
 8002168:	2209      	movs	r2, #9
 800216a:	602a      	str	r2, [r5, #0]
 800216c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002170:	81a3      	strh	r3, [r4, #12]
 8002172:	f04f 30ff 	mov.w	r0, #4294967295
 8002176:	e033      	b.n	80021e0 <__swsetup_r+0x98>
 8002178:	0758      	lsls	r0, r3, #29
 800217a:	d512      	bpl.n	80021a2 <__swsetup_r+0x5a>
 800217c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800217e:	b141      	cbz	r1, 8002192 <__swsetup_r+0x4a>
 8002180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002184:	4299      	cmp	r1, r3
 8002186:	d002      	beq.n	800218e <__swsetup_r+0x46>
 8002188:	4628      	mov	r0, r5
 800218a:	f000 f8af 	bl	80022ec <_free_r>
 800218e:	2300      	movs	r3, #0
 8002190:	6363      	str	r3, [r4, #52]	@ 0x34
 8002192:	89a3      	ldrh	r3, [r4, #12]
 8002194:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002198:	81a3      	strh	r3, [r4, #12]
 800219a:	2300      	movs	r3, #0
 800219c:	6063      	str	r3, [r4, #4]
 800219e:	6923      	ldr	r3, [r4, #16]
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	89a3      	ldrh	r3, [r4, #12]
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	81a3      	strh	r3, [r4, #12]
 80021aa:	6923      	ldr	r3, [r4, #16]
 80021ac:	b94b      	cbnz	r3, 80021c2 <__swsetup_r+0x7a>
 80021ae:	89a3      	ldrh	r3, [r4, #12]
 80021b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80021b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021b8:	d003      	beq.n	80021c2 <__swsetup_r+0x7a>
 80021ba:	4621      	mov	r1, r4
 80021bc:	4628      	mov	r0, r5
 80021be:	f000 fd2d 	bl	8002c1c <__smakebuf_r>
 80021c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021c6:	f013 0201 	ands.w	r2, r3, #1
 80021ca:	d00a      	beq.n	80021e2 <__swsetup_r+0x9a>
 80021cc:	2200      	movs	r2, #0
 80021ce:	60a2      	str	r2, [r4, #8]
 80021d0:	6962      	ldr	r2, [r4, #20]
 80021d2:	4252      	negs	r2, r2
 80021d4:	61a2      	str	r2, [r4, #24]
 80021d6:	6922      	ldr	r2, [r4, #16]
 80021d8:	b942      	cbnz	r2, 80021ec <__swsetup_r+0xa4>
 80021da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80021de:	d1c5      	bne.n	800216c <__swsetup_r+0x24>
 80021e0:	bd38      	pop	{r3, r4, r5, pc}
 80021e2:	0799      	lsls	r1, r3, #30
 80021e4:	bf58      	it	pl
 80021e6:	6962      	ldrpl	r2, [r4, #20]
 80021e8:	60a2      	str	r2, [r4, #8]
 80021ea:	e7f4      	b.n	80021d6 <__swsetup_r+0x8e>
 80021ec:	2000      	movs	r0, #0
 80021ee:	e7f7      	b.n	80021e0 <__swsetup_r+0x98>
 80021f0:	20000018 	.word	0x20000018

080021f4 <memset>:
 80021f4:	4402      	add	r2, r0
 80021f6:	4603      	mov	r3, r0
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d100      	bne.n	80021fe <memset+0xa>
 80021fc:	4770      	bx	lr
 80021fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002202:	e7f9      	b.n	80021f8 <memset+0x4>

08002204 <_close_r>:
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	4d06      	ldr	r5, [pc, #24]	@ (8002220 <_close_r+0x1c>)
 8002208:	2300      	movs	r3, #0
 800220a:	4604      	mov	r4, r0
 800220c:	4608      	mov	r0, r1
 800220e:	602b      	str	r3, [r5, #0]
 8002210:	f7fe fd50 	bl	8000cb4 <_close>
 8002214:	1c43      	adds	r3, r0, #1
 8002216:	d102      	bne.n	800221e <_close_r+0x1a>
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	b103      	cbz	r3, 800221e <_close_r+0x1a>
 800221c:	6023      	str	r3, [r4, #0]
 800221e:	bd38      	pop	{r3, r4, r5, pc}
 8002220:	200001c8 	.word	0x200001c8

08002224 <_lseek_r>:
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4d07      	ldr	r5, [pc, #28]	@ (8002244 <_lseek_r+0x20>)
 8002228:	4604      	mov	r4, r0
 800222a:	4608      	mov	r0, r1
 800222c:	4611      	mov	r1, r2
 800222e:	2200      	movs	r2, #0
 8002230:	602a      	str	r2, [r5, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	f7fe fd65 	bl	8000d02 <_lseek>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d102      	bne.n	8002242 <_lseek_r+0x1e>
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	b103      	cbz	r3, 8002242 <_lseek_r+0x1e>
 8002240:	6023      	str	r3, [r4, #0]
 8002242:	bd38      	pop	{r3, r4, r5, pc}
 8002244:	200001c8 	.word	0x200001c8

08002248 <_read_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4d07      	ldr	r5, [pc, #28]	@ (8002268 <_read_r+0x20>)
 800224c:	4604      	mov	r4, r0
 800224e:	4608      	mov	r0, r1
 8002250:	4611      	mov	r1, r2
 8002252:	2200      	movs	r2, #0
 8002254:	602a      	str	r2, [r5, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f7fe fcf3 	bl	8000c42 <_read>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d102      	bne.n	8002266 <_read_r+0x1e>
 8002260:	682b      	ldr	r3, [r5, #0]
 8002262:	b103      	cbz	r3, 8002266 <_read_r+0x1e>
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	200001c8 	.word	0x200001c8

0800226c <_write_r>:
 800226c:	b538      	push	{r3, r4, r5, lr}
 800226e:	4d07      	ldr	r5, [pc, #28]	@ (800228c <_write_r+0x20>)
 8002270:	4604      	mov	r4, r0
 8002272:	4608      	mov	r0, r1
 8002274:	4611      	mov	r1, r2
 8002276:	2200      	movs	r2, #0
 8002278:	602a      	str	r2, [r5, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f7fe fcfe 	bl	8000c7c <_write>
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	d102      	bne.n	800228a <_write_r+0x1e>
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	b103      	cbz	r3, 800228a <_write_r+0x1e>
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	bd38      	pop	{r3, r4, r5, pc}
 800228c:	200001c8 	.word	0x200001c8

08002290 <__errno>:
 8002290:	4b01      	ldr	r3, [pc, #4]	@ (8002298 <__errno+0x8>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000018 	.word	0x20000018

0800229c <__libc_init_array>:
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	4d0d      	ldr	r5, [pc, #52]	@ (80022d4 <__libc_init_array+0x38>)
 80022a0:	4c0d      	ldr	r4, [pc, #52]	@ (80022d8 <__libc_init_array+0x3c>)
 80022a2:	1b64      	subs	r4, r4, r5
 80022a4:	10a4      	asrs	r4, r4, #2
 80022a6:	2600      	movs	r6, #0
 80022a8:	42a6      	cmp	r6, r4
 80022aa:	d109      	bne.n	80022c0 <__libc_init_array+0x24>
 80022ac:	4d0b      	ldr	r5, [pc, #44]	@ (80022dc <__libc_init_array+0x40>)
 80022ae:	4c0c      	ldr	r4, [pc, #48]	@ (80022e0 <__libc_init_array+0x44>)
 80022b0:	f000 fd22 	bl	8002cf8 <_init>
 80022b4:	1b64      	subs	r4, r4, r5
 80022b6:	10a4      	asrs	r4, r4, #2
 80022b8:	2600      	movs	r6, #0
 80022ba:	42a6      	cmp	r6, r4
 80022bc:	d105      	bne.n	80022ca <__libc_init_array+0x2e>
 80022be:	bd70      	pop	{r4, r5, r6, pc}
 80022c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c4:	4798      	blx	r3
 80022c6:	3601      	adds	r6, #1
 80022c8:	e7ee      	b.n	80022a8 <__libc_init_array+0xc>
 80022ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ce:	4798      	blx	r3
 80022d0:	3601      	adds	r6, #1
 80022d2:	e7f2      	b.n	80022ba <__libc_init_array+0x1e>
 80022d4:	08002dd4 	.word	0x08002dd4
 80022d8:	08002dd4 	.word	0x08002dd4
 80022dc:	08002dd4 	.word	0x08002dd4
 80022e0:	08002dd8 	.word	0x08002dd8

080022e4 <__retarget_lock_init_recursive>:
 80022e4:	4770      	bx	lr

080022e6 <__retarget_lock_acquire_recursive>:
 80022e6:	4770      	bx	lr

080022e8 <__retarget_lock_release_recursive>:
 80022e8:	4770      	bx	lr
	...

080022ec <_free_r>:
 80022ec:	b538      	push	{r3, r4, r5, lr}
 80022ee:	4605      	mov	r5, r0
 80022f0:	2900      	cmp	r1, #0
 80022f2:	d041      	beq.n	8002378 <_free_r+0x8c>
 80022f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022f8:	1f0c      	subs	r4, r1, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bfb8      	it	lt
 80022fe:	18e4      	addlt	r4, r4, r3
 8002300:	f000 f8e0 	bl	80024c4 <__malloc_lock>
 8002304:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <_free_r+0x90>)
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	b933      	cbnz	r3, 8002318 <_free_r+0x2c>
 800230a:	6063      	str	r3, [r4, #4]
 800230c:	6014      	str	r4, [r2, #0]
 800230e:	4628      	mov	r0, r5
 8002310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002314:	f000 b8dc 	b.w	80024d0 <__malloc_unlock>
 8002318:	42a3      	cmp	r3, r4
 800231a:	d908      	bls.n	800232e <_free_r+0x42>
 800231c:	6820      	ldr	r0, [r4, #0]
 800231e:	1821      	adds	r1, r4, r0
 8002320:	428b      	cmp	r3, r1
 8002322:	bf01      	itttt	eq
 8002324:	6819      	ldreq	r1, [r3, #0]
 8002326:	685b      	ldreq	r3, [r3, #4]
 8002328:	1809      	addeq	r1, r1, r0
 800232a:	6021      	streq	r1, [r4, #0]
 800232c:	e7ed      	b.n	800230a <_free_r+0x1e>
 800232e:	461a      	mov	r2, r3
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	b10b      	cbz	r3, 8002338 <_free_r+0x4c>
 8002334:	42a3      	cmp	r3, r4
 8002336:	d9fa      	bls.n	800232e <_free_r+0x42>
 8002338:	6811      	ldr	r1, [r2, #0]
 800233a:	1850      	adds	r0, r2, r1
 800233c:	42a0      	cmp	r0, r4
 800233e:	d10b      	bne.n	8002358 <_free_r+0x6c>
 8002340:	6820      	ldr	r0, [r4, #0]
 8002342:	4401      	add	r1, r0
 8002344:	1850      	adds	r0, r2, r1
 8002346:	4283      	cmp	r3, r0
 8002348:	6011      	str	r1, [r2, #0]
 800234a:	d1e0      	bne.n	800230e <_free_r+0x22>
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	6053      	str	r3, [r2, #4]
 8002352:	4408      	add	r0, r1
 8002354:	6010      	str	r0, [r2, #0]
 8002356:	e7da      	b.n	800230e <_free_r+0x22>
 8002358:	d902      	bls.n	8002360 <_free_r+0x74>
 800235a:	230c      	movs	r3, #12
 800235c:	602b      	str	r3, [r5, #0]
 800235e:	e7d6      	b.n	800230e <_free_r+0x22>
 8002360:	6820      	ldr	r0, [r4, #0]
 8002362:	1821      	adds	r1, r4, r0
 8002364:	428b      	cmp	r3, r1
 8002366:	bf04      	itt	eq
 8002368:	6819      	ldreq	r1, [r3, #0]
 800236a:	685b      	ldreq	r3, [r3, #4]
 800236c:	6063      	str	r3, [r4, #4]
 800236e:	bf04      	itt	eq
 8002370:	1809      	addeq	r1, r1, r0
 8002372:	6021      	streq	r1, [r4, #0]
 8002374:	6054      	str	r4, [r2, #4]
 8002376:	e7ca      	b.n	800230e <_free_r+0x22>
 8002378:	bd38      	pop	{r3, r4, r5, pc}
 800237a:	bf00      	nop
 800237c:	200001d4 	.word	0x200001d4

08002380 <sbrk_aligned>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	4e0f      	ldr	r6, [pc, #60]	@ (80023c0 <sbrk_aligned+0x40>)
 8002384:	460c      	mov	r4, r1
 8002386:	6831      	ldr	r1, [r6, #0]
 8002388:	4605      	mov	r5, r0
 800238a:	b911      	cbnz	r1, 8002392 <sbrk_aligned+0x12>
 800238c:	f000 fca4 	bl	8002cd8 <_sbrk_r>
 8002390:	6030      	str	r0, [r6, #0]
 8002392:	4621      	mov	r1, r4
 8002394:	4628      	mov	r0, r5
 8002396:	f000 fc9f 	bl	8002cd8 <_sbrk_r>
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	d103      	bne.n	80023a6 <sbrk_aligned+0x26>
 800239e:	f04f 34ff 	mov.w	r4, #4294967295
 80023a2:	4620      	mov	r0, r4
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
 80023a6:	1cc4      	adds	r4, r0, #3
 80023a8:	f024 0403 	bic.w	r4, r4, #3
 80023ac:	42a0      	cmp	r0, r4
 80023ae:	d0f8      	beq.n	80023a2 <sbrk_aligned+0x22>
 80023b0:	1a21      	subs	r1, r4, r0
 80023b2:	4628      	mov	r0, r5
 80023b4:	f000 fc90 	bl	8002cd8 <_sbrk_r>
 80023b8:	3001      	adds	r0, #1
 80023ba:	d1f2      	bne.n	80023a2 <sbrk_aligned+0x22>
 80023bc:	e7ef      	b.n	800239e <sbrk_aligned+0x1e>
 80023be:	bf00      	nop
 80023c0:	200001d0 	.word	0x200001d0

080023c4 <_malloc_r>:
 80023c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023c8:	1ccd      	adds	r5, r1, #3
 80023ca:	f025 0503 	bic.w	r5, r5, #3
 80023ce:	3508      	adds	r5, #8
 80023d0:	2d0c      	cmp	r5, #12
 80023d2:	bf38      	it	cc
 80023d4:	250c      	movcc	r5, #12
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	4606      	mov	r6, r0
 80023da:	db01      	blt.n	80023e0 <_malloc_r+0x1c>
 80023dc:	42a9      	cmp	r1, r5
 80023de:	d904      	bls.n	80023ea <_malloc_r+0x26>
 80023e0:	230c      	movs	r3, #12
 80023e2:	6033      	str	r3, [r6, #0]
 80023e4:	2000      	movs	r0, #0
 80023e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80024c0 <_malloc_r+0xfc>
 80023ee:	f000 f869 	bl	80024c4 <__malloc_lock>
 80023f2:	f8d8 3000 	ldr.w	r3, [r8]
 80023f6:	461c      	mov	r4, r3
 80023f8:	bb44      	cbnz	r4, 800244c <_malloc_r+0x88>
 80023fa:	4629      	mov	r1, r5
 80023fc:	4630      	mov	r0, r6
 80023fe:	f7ff ffbf 	bl	8002380 <sbrk_aligned>
 8002402:	1c43      	adds	r3, r0, #1
 8002404:	4604      	mov	r4, r0
 8002406:	d158      	bne.n	80024ba <_malloc_r+0xf6>
 8002408:	f8d8 4000 	ldr.w	r4, [r8]
 800240c:	4627      	mov	r7, r4
 800240e:	2f00      	cmp	r7, #0
 8002410:	d143      	bne.n	800249a <_malloc_r+0xd6>
 8002412:	2c00      	cmp	r4, #0
 8002414:	d04b      	beq.n	80024ae <_malloc_r+0xea>
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	4639      	mov	r1, r7
 800241a:	4630      	mov	r0, r6
 800241c:	eb04 0903 	add.w	r9, r4, r3
 8002420:	f000 fc5a 	bl	8002cd8 <_sbrk_r>
 8002424:	4581      	cmp	r9, r0
 8002426:	d142      	bne.n	80024ae <_malloc_r+0xea>
 8002428:	6821      	ldr	r1, [r4, #0]
 800242a:	1a6d      	subs	r5, r5, r1
 800242c:	4629      	mov	r1, r5
 800242e:	4630      	mov	r0, r6
 8002430:	f7ff ffa6 	bl	8002380 <sbrk_aligned>
 8002434:	3001      	adds	r0, #1
 8002436:	d03a      	beq.n	80024ae <_malloc_r+0xea>
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	442b      	add	r3, r5
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	f8d8 3000 	ldr.w	r3, [r8]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	bb62      	cbnz	r2, 80024a0 <_malloc_r+0xdc>
 8002446:	f8c8 7000 	str.w	r7, [r8]
 800244a:	e00f      	b.n	800246c <_malloc_r+0xa8>
 800244c:	6822      	ldr	r2, [r4, #0]
 800244e:	1b52      	subs	r2, r2, r5
 8002450:	d420      	bmi.n	8002494 <_malloc_r+0xd0>
 8002452:	2a0b      	cmp	r2, #11
 8002454:	d917      	bls.n	8002486 <_malloc_r+0xc2>
 8002456:	1961      	adds	r1, r4, r5
 8002458:	42a3      	cmp	r3, r4
 800245a:	6025      	str	r5, [r4, #0]
 800245c:	bf18      	it	ne
 800245e:	6059      	strne	r1, [r3, #4]
 8002460:	6863      	ldr	r3, [r4, #4]
 8002462:	bf08      	it	eq
 8002464:	f8c8 1000 	streq.w	r1, [r8]
 8002468:	5162      	str	r2, [r4, r5]
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	4630      	mov	r0, r6
 800246e:	f000 f82f 	bl	80024d0 <__malloc_unlock>
 8002472:	f104 000b 	add.w	r0, r4, #11
 8002476:	1d23      	adds	r3, r4, #4
 8002478:	f020 0007 	bic.w	r0, r0, #7
 800247c:	1ac2      	subs	r2, r0, r3
 800247e:	bf1c      	itt	ne
 8002480:	1a1b      	subne	r3, r3, r0
 8002482:	50a3      	strne	r3, [r4, r2]
 8002484:	e7af      	b.n	80023e6 <_malloc_r+0x22>
 8002486:	6862      	ldr	r2, [r4, #4]
 8002488:	42a3      	cmp	r3, r4
 800248a:	bf0c      	ite	eq
 800248c:	f8c8 2000 	streq.w	r2, [r8]
 8002490:	605a      	strne	r2, [r3, #4]
 8002492:	e7eb      	b.n	800246c <_malloc_r+0xa8>
 8002494:	4623      	mov	r3, r4
 8002496:	6864      	ldr	r4, [r4, #4]
 8002498:	e7ae      	b.n	80023f8 <_malloc_r+0x34>
 800249a:	463c      	mov	r4, r7
 800249c:	687f      	ldr	r7, [r7, #4]
 800249e:	e7b6      	b.n	800240e <_malloc_r+0x4a>
 80024a0:	461a      	mov	r2, r3
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	42a3      	cmp	r3, r4
 80024a6:	d1fb      	bne.n	80024a0 <_malloc_r+0xdc>
 80024a8:	2300      	movs	r3, #0
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	e7de      	b.n	800246c <_malloc_r+0xa8>
 80024ae:	230c      	movs	r3, #12
 80024b0:	6033      	str	r3, [r6, #0]
 80024b2:	4630      	mov	r0, r6
 80024b4:	f000 f80c 	bl	80024d0 <__malloc_unlock>
 80024b8:	e794      	b.n	80023e4 <_malloc_r+0x20>
 80024ba:	6005      	str	r5, [r0, #0]
 80024bc:	e7d6      	b.n	800246c <_malloc_r+0xa8>
 80024be:	bf00      	nop
 80024c0:	200001d4 	.word	0x200001d4

080024c4 <__malloc_lock>:
 80024c4:	4801      	ldr	r0, [pc, #4]	@ (80024cc <__malloc_lock+0x8>)
 80024c6:	f7ff bf0e 	b.w	80022e6 <__retarget_lock_acquire_recursive>
 80024ca:	bf00      	nop
 80024cc:	200001cc 	.word	0x200001cc

080024d0 <__malloc_unlock>:
 80024d0:	4801      	ldr	r0, [pc, #4]	@ (80024d8 <__malloc_unlock+0x8>)
 80024d2:	f7ff bf09 	b.w	80022e8 <__retarget_lock_release_recursive>
 80024d6:	bf00      	nop
 80024d8:	200001cc 	.word	0x200001cc

080024dc <__sfputc_r>:
 80024dc:	6893      	ldr	r3, [r2, #8]
 80024de:	3b01      	subs	r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	b410      	push	{r4}
 80024e4:	6093      	str	r3, [r2, #8]
 80024e6:	da08      	bge.n	80024fa <__sfputc_r+0x1e>
 80024e8:	6994      	ldr	r4, [r2, #24]
 80024ea:	42a3      	cmp	r3, r4
 80024ec:	db01      	blt.n	80024f2 <__sfputc_r+0x16>
 80024ee:	290a      	cmp	r1, #10
 80024f0:	d103      	bne.n	80024fa <__sfputc_r+0x1e>
 80024f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024f6:	f7ff bde8 	b.w	80020ca <__swbuf_r>
 80024fa:	6813      	ldr	r3, [r2, #0]
 80024fc:	1c58      	adds	r0, r3, #1
 80024fe:	6010      	str	r0, [r2, #0]
 8002500:	7019      	strb	r1, [r3, #0]
 8002502:	4608      	mov	r0, r1
 8002504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002508:	4770      	bx	lr

0800250a <__sfputs_r>:
 800250a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250c:	4606      	mov	r6, r0
 800250e:	460f      	mov	r7, r1
 8002510:	4614      	mov	r4, r2
 8002512:	18d5      	adds	r5, r2, r3
 8002514:	42ac      	cmp	r4, r5
 8002516:	d101      	bne.n	800251c <__sfputs_r+0x12>
 8002518:	2000      	movs	r0, #0
 800251a:	e007      	b.n	800252c <__sfputs_r+0x22>
 800251c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002520:	463a      	mov	r2, r7
 8002522:	4630      	mov	r0, r6
 8002524:	f7ff ffda 	bl	80024dc <__sfputc_r>
 8002528:	1c43      	adds	r3, r0, #1
 800252a:	d1f3      	bne.n	8002514 <__sfputs_r+0xa>
 800252c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002530 <_vfiprintf_r>:
 8002530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002534:	460d      	mov	r5, r1
 8002536:	b09d      	sub	sp, #116	@ 0x74
 8002538:	4614      	mov	r4, r2
 800253a:	4698      	mov	r8, r3
 800253c:	4606      	mov	r6, r0
 800253e:	b118      	cbz	r0, 8002548 <_vfiprintf_r+0x18>
 8002540:	6a03      	ldr	r3, [r0, #32]
 8002542:	b90b      	cbnz	r3, 8002548 <_vfiprintf_r+0x18>
 8002544:	f7ff fcd8 	bl	8001ef8 <__sinit>
 8002548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800254a:	07d9      	lsls	r1, r3, #31
 800254c:	d405      	bmi.n	800255a <_vfiprintf_r+0x2a>
 800254e:	89ab      	ldrh	r3, [r5, #12]
 8002550:	059a      	lsls	r2, r3, #22
 8002552:	d402      	bmi.n	800255a <_vfiprintf_r+0x2a>
 8002554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002556:	f7ff fec6 	bl	80022e6 <__retarget_lock_acquire_recursive>
 800255a:	89ab      	ldrh	r3, [r5, #12]
 800255c:	071b      	lsls	r3, r3, #28
 800255e:	d501      	bpl.n	8002564 <_vfiprintf_r+0x34>
 8002560:	692b      	ldr	r3, [r5, #16]
 8002562:	b99b      	cbnz	r3, 800258c <_vfiprintf_r+0x5c>
 8002564:	4629      	mov	r1, r5
 8002566:	4630      	mov	r0, r6
 8002568:	f7ff fdee 	bl	8002148 <__swsetup_r>
 800256c:	b170      	cbz	r0, 800258c <_vfiprintf_r+0x5c>
 800256e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002570:	07dc      	lsls	r4, r3, #31
 8002572:	d504      	bpl.n	800257e <_vfiprintf_r+0x4e>
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	b01d      	add	sp, #116	@ 0x74
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800257e:	89ab      	ldrh	r3, [r5, #12]
 8002580:	0598      	lsls	r0, r3, #22
 8002582:	d4f7      	bmi.n	8002574 <_vfiprintf_r+0x44>
 8002584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002586:	f7ff feaf 	bl	80022e8 <__retarget_lock_release_recursive>
 800258a:	e7f3      	b.n	8002574 <_vfiprintf_r+0x44>
 800258c:	2300      	movs	r3, #0
 800258e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002590:	2320      	movs	r3, #32
 8002592:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002596:	f8cd 800c 	str.w	r8, [sp, #12]
 800259a:	2330      	movs	r3, #48	@ 0x30
 800259c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800274c <_vfiprintf_r+0x21c>
 80025a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80025a4:	f04f 0901 	mov.w	r9, #1
 80025a8:	4623      	mov	r3, r4
 80025aa:	469a      	mov	sl, r3
 80025ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025b0:	b10a      	cbz	r2, 80025b6 <_vfiprintf_r+0x86>
 80025b2:	2a25      	cmp	r2, #37	@ 0x25
 80025b4:	d1f9      	bne.n	80025aa <_vfiprintf_r+0x7a>
 80025b6:	ebba 0b04 	subs.w	fp, sl, r4
 80025ba:	d00b      	beq.n	80025d4 <_vfiprintf_r+0xa4>
 80025bc:	465b      	mov	r3, fp
 80025be:	4622      	mov	r2, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	4630      	mov	r0, r6
 80025c4:	f7ff ffa1 	bl	800250a <__sfputs_r>
 80025c8:	3001      	adds	r0, #1
 80025ca:	f000 80a7 	beq.w	800271c <_vfiprintf_r+0x1ec>
 80025ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80025d0:	445a      	add	r2, fp
 80025d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80025d4:	f89a 3000 	ldrb.w	r3, [sl]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 809f 	beq.w	800271c <_vfiprintf_r+0x1ec>
 80025de:	2300      	movs	r3, #0
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025e8:	f10a 0a01 	add.w	sl, sl, #1
 80025ec:	9304      	str	r3, [sp, #16]
 80025ee:	9307      	str	r3, [sp, #28]
 80025f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80025f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80025f6:	4654      	mov	r4, sl
 80025f8:	2205      	movs	r2, #5
 80025fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025fe:	4853      	ldr	r0, [pc, #332]	@ (800274c <_vfiprintf_r+0x21c>)
 8002600:	f7fd fdee 	bl	80001e0 <memchr>
 8002604:	9a04      	ldr	r2, [sp, #16]
 8002606:	b9d8      	cbnz	r0, 8002640 <_vfiprintf_r+0x110>
 8002608:	06d1      	lsls	r1, r2, #27
 800260a:	bf44      	itt	mi
 800260c:	2320      	movmi	r3, #32
 800260e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002612:	0713      	lsls	r3, r2, #28
 8002614:	bf44      	itt	mi
 8002616:	232b      	movmi	r3, #43	@ 0x2b
 8002618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800261c:	f89a 3000 	ldrb.w	r3, [sl]
 8002620:	2b2a      	cmp	r3, #42	@ 0x2a
 8002622:	d015      	beq.n	8002650 <_vfiprintf_r+0x120>
 8002624:	9a07      	ldr	r2, [sp, #28]
 8002626:	4654      	mov	r4, sl
 8002628:	2000      	movs	r0, #0
 800262a:	f04f 0c0a 	mov.w	ip, #10
 800262e:	4621      	mov	r1, r4
 8002630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002634:	3b30      	subs	r3, #48	@ 0x30
 8002636:	2b09      	cmp	r3, #9
 8002638:	d94b      	bls.n	80026d2 <_vfiprintf_r+0x1a2>
 800263a:	b1b0      	cbz	r0, 800266a <_vfiprintf_r+0x13a>
 800263c:	9207      	str	r2, [sp, #28]
 800263e:	e014      	b.n	800266a <_vfiprintf_r+0x13a>
 8002640:	eba0 0308 	sub.w	r3, r0, r8
 8002644:	fa09 f303 	lsl.w	r3, r9, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	9304      	str	r3, [sp, #16]
 800264c:	46a2      	mov	sl, r4
 800264e:	e7d2      	b.n	80025f6 <_vfiprintf_r+0xc6>
 8002650:	9b03      	ldr	r3, [sp, #12]
 8002652:	1d19      	adds	r1, r3, #4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	9103      	str	r1, [sp, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	bfbb      	ittet	lt
 800265c:	425b      	neglt	r3, r3
 800265e:	f042 0202 	orrlt.w	r2, r2, #2
 8002662:	9307      	strge	r3, [sp, #28]
 8002664:	9307      	strlt	r3, [sp, #28]
 8002666:	bfb8      	it	lt
 8002668:	9204      	strlt	r2, [sp, #16]
 800266a:	7823      	ldrb	r3, [r4, #0]
 800266c:	2b2e      	cmp	r3, #46	@ 0x2e
 800266e:	d10a      	bne.n	8002686 <_vfiprintf_r+0x156>
 8002670:	7863      	ldrb	r3, [r4, #1]
 8002672:	2b2a      	cmp	r3, #42	@ 0x2a
 8002674:	d132      	bne.n	80026dc <_vfiprintf_r+0x1ac>
 8002676:	9b03      	ldr	r3, [sp, #12]
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	9203      	str	r2, [sp, #12]
 800267e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002682:	3402      	adds	r4, #2
 8002684:	9305      	str	r3, [sp, #20]
 8002686:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800275c <_vfiprintf_r+0x22c>
 800268a:	7821      	ldrb	r1, [r4, #0]
 800268c:	2203      	movs	r2, #3
 800268e:	4650      	mov	r0, sl
 8002690:	f7fd fda6 	bl	80001e0 <memchr>
 8002694:	b138      	cbz	r0, 80026a6 <_vfiprintf_r+0x176>
 8002696:	9b04      	ldr	r3, [sp, #16]
 8002698:	eba0 000a 	sub.w	r0, r0, sl
 800269c:	2240      	movs	r2, #64	@ 0x40
 800269e:	4082      	lsls	r2, r0
 80026a0:	4313      	orrs	r3, r2
 80026a2:	3401      	adds	r4, #1
 80026a4:	9304      	str	r3, [sp, #16]
 80026a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026aa:	4829      	ldr	r0, [pc, #164]	@ (8002750 <_vfiprintf_r+0x220>)
 80026ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80026b0:	2206      	movs	r2, #6
 80026b2:	f7fd fd95 	bl	80001e0 <memchr>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d03f      	beq.n	800273a <_vfiprintf_r+0x20a>
 80026ba:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <_vfiprintf_r+0x224>)
 80026bc:	bb1b      	cbnz	r3, 8002706 <_vfiprintf_r+0x1d6>
 80026be:	9b03      	ldr	r3, [sp, #12]
 80026c0:	3307      	adds	r3, #7
 80026c2:	f023 0307 	bic.w	r3, r3, #7
 80026c6:	3308      	adds	r3, #8
 80026c8:	9303      	str	r3, [sp, #12]
 80026ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026cc:	443b      	add	r3, r7
 80026ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80026d0:	e76a      	b.n	80025a8 <_vfiprintf_r+0x78>
 80026d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80026d6:	460c      	mov	r4, r1
 80026d8:	2001      	movs	r0, #1
 80026da:	e7a8      	b.n	800262e <_vfiprintf_r+0xfe>
 80026dc:	2300      	movs	r3, #0
 80026de:	3401      	adds	r4, #1
 80026e0:	9305      	str	r3, [sp, #20]
 80026e2:	4619      	mov	r1, r3
 80026e4:	f04f 0c0a 	mov.w	ip, #10
 80026e8:	4620      	mov	r0, r4
 80026ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026ee:	3a30      	subs	r2, #48	@ 0x30
 80026f0:	2a09      	cmp	r2, #9
 80026f2:	d903      	bls.n	80026fc <_vfiprintf_r+0x1cc>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0c6      	beq.n	8002686 <_vfiprintf_r+0x156>
 80026f8:	9105      	str	r1, [sp, #20]
 80026fa:	e7c4      	b.n	8002686 <_vfiprintf_r+0x156>
 80026fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002700:	4604      	mov	r4, r0
 8002702:	2301      	movs	r3, #1
 8002704:	e7f0      	b.n	80026e8 <_vfiprintf_r+0x1b8>
 8002706:	ab03      	add	r3, sp, #12
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	462a      	mov	r2, r5
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <_vfiprintf_r+0x228>)
 800270e:	a904      	add	r1, sp, #16
 8002710:	4630      	mov	r0, r6
 8002712:	f3af 8000 	nop.w
 8002716:	4607      	mov	r7, r0
 8002718:	1c78      	adds	r0, r7, #1
 800271a:	d1d6      	bne.n	80026ca <_vfiprintf_r+0x19a>
 800271c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800271e:	07d9      	lsls	r1, r3, #31
 8002720:	d405      	bmi.n	800272e <_vfiprintf_r+0x1fe>
 8002722:	89ab      	ldrh	r3, [r5, #12]
 8002724:	059a      	lsls	r2, r3, #22
 8002726:	d402      	bmi.n	800272e <_vfiprintf_r+0x1fe>
 8002728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800272a:	f7ff fddd 	bl	80022e8 <__retarget_lock_release_recursive>
 800272e:	89ab      	ldrh	r3, [r5, #12]
 8002730:	065b      	lsls	r3, r3, #25
 8002732:	f53f af1f 	bmi.w	8002574 <_vfiprintf_r+0x44>
 8002736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002738:	e71e      	b.n	8002578 <_vfiprintf_r+0x48>
 800273a:	ab03      	add	r3, sp, #12
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	462a      	mov	r2, r5
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <_vfiprintf_r+0x228>)
 8002742:	a904      	add	r1, sp, #16
 8002744:	4630      	mov	r0, r6
 8002746:	f000 f879 	bl	800283c <_printf_i>
 800274a:	e7e4      	b.n	8002716 <_vfiprintf_r+0x1e6>
 800274c:	08002d98 	.word	0x08002d98
 8002750:	08002da2 	.word	0x08002da2
 8002754:	00000000 	.word	0x00000000
 8002758:	0800250b 	.word	0x0800250b
 800275c:	08002d9e 	.word	0x08002d9e

08002760 <_printf_common>:
 8002760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002764:	4616      	mov	r6, r2
 8002766:	4698      	mov	r8, r3
 8002768:	688a      	ldr	r2, [r1, #8]
 800276a:	690b      	ldr	r3, [r1, #16]
 800276c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002770:	4293      	cmp	r3, r2
 8002772:	bfb8      	it	lt
 8002774:	4613      	movlt	r3, r2
 8002776:	6033      	str	r3, [r6, #0]
 8002778:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800277c:	4607      	mov	r7, r0
 800277e:	460c      	mov	r4, r1
 8002780:	b10a      	cbz	r2, 8002786 <_printf_common+0x26>
 8002782:	3301      	adds	r3, #1
 8002784:	6033      	str	r3, [r6, #0]
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	0699      	lsls	r1, r3, #26
 800278a:	bf42      	ittt	mi
 800278c:	6833      	ldrmi	r3, [r6, #0]
 800278e:	3302      	addmi	r3, #2
 8002790:	6033      	strmi	r3, [r6, #0]
 8002792:	6825      	ldr	r5, [r4, #0]
 8002794:	f015 0506 	ands.w	r5, r5, #6
 8002798:	d106      	bne.n	80027a8 <_printf_common+0x48>
 800279a:	f104 0a19 	add.w	sl, r4, #25
 800279e:	68e3      	ldr	r3, [r4, #12]
 80027a0:	6832      	ldr	r2, [r6, #0]
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	42ab      	cmp	r3, r5
 80027a6:	dc26      	bgt.n	80027f6 <_printf_common+0x96>
 80027a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80027ac:	6822      	ldr	r2, [r4, #0]
 80027ae:	3b00      	subs	r3, #0
 80027b0:	bf18      	it	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	0692      	lsls	r2, r2, #26
 80027b6:	d42b      	bmi.n	8002810 <_printf_common+0xb0>
 80027b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80027bc:	4641      	mov	r1, r8
 80027be:	4638      	mov	r0, r7
 80027c0:	47c8      	blx	r9
 80027c2:	3001      	adds	r0, #1
 80027c4:	d01e      	beq.n	8002804 <_printf_common+0xa4>
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	6922      	ldr	r2, [r4, #16]
 80027ca:	f003 0306 	and.w	r3, r3, #6
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf02      	ittt	eq
 80027d2:	68e5      	ldreq	r5, [r4, #12]
 80027d4:	6833      	ldreq	r3, [r6, #0]
 80027d6:	1aed      	subeq	r5, r5, r3
 80027d8:	68a3      	ldr	r3, [r4, #8]
 80027da:	bf0c      	ite	eq
 80027dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027e0:	2500      	movne	r5, #0
 80027e2:	4293      	cmp	r3, r2
 80027e4:	bfc4      	itt	gt
 80027e6:	1a9b      	subgt	r3, r3, r2
 80027e8:	18ed      	addgt	r5, r5, r3
 80027ea:	2600      	movs	r6, #0
 80027ec:	341a      	adds	r4, #26
 80027ee:	42b5      	cmp	r5, r6
 80027f0:	d11a      	bne.n	8002828 <_printf_common+0xc8>
 80027f2:	2000      	movs	r0, #0
 80027f4:	e008      	b.n	8002808 <_printf_common+0xa8>
 80027f6:	2301      	movs	r3, #1
 80027f8:	4652      	mov	r2, sl
 80027fa:	4641      	mov	r1, r8
 80027fc:	4638      	mov	r0, r7
 80027fe:	47c8      	blx	r9
 8002800:	3001      	adds	r0, #1
 8002802:	d103      	bne.n	800280c <_printf_common+0xac>
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800280c:	3501      	adds	r5, #1
 800280e:	e7c6      	b.n	800279e <_printf_common+0x3e>
 8002810:	18e1      	adds	r1, r4, r3
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	2030      	movs	r0, #48	@ 0x30
 8002816:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800281a:	4422      	add	r2, r4
 800281c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002820:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002824:	3302      	adds	r3, #2
 8002826:	e7c7      	b.n	80027b8 <_printf_common+0x58>
 8002828:	2301      	movs	r3, #1
 800282a:	4622      	mov	r2, r4
 800282c:	4641      	mov	r1, r8
 800282e:	4638      	mov	r0, r7
 8002830:	47c8      	blx	r9
 8002832:	3001      	adds	r0, #1
 8002834:	d0e6      	beq.n	8002804 <_printf_common+0xa4>
 8002836:	3601      	adds	r6, #1
 8002838:	e7d9      	b.n	80027ee <_printf_common+0x8e>
	...

0800283c <_printf_i>:
 800283c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002840:	7e0f      	ldrb	r7, [r1, #24]
 8002842:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002844:	2f78      	cmp	r7, #120	@ 0x78
 8002846:	4691      	mov	r9, r2
 8002848:	4680      	mov	r8, r0
 800284a:	460c      	mov	r4, r1
 800284c:	469a      	mov	sl, r3
 800284e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002852:	d807      	bhi.n	8002864 <_printf_i+0x28>
 8002854:	2f62      	cmp	r7, #98	@ 0x62
 8002856:	d80a      	bhi.n	800286e <_printf_i+0x32>
 8002858:	2f00      	cmp	r7, #0
 800285a:	f000 80d1 	beq.w	8002a00 <_printf_i+0x1c4>
 800285e:	2f58      	cmp	r7, #88	@ 0x58
 8002860:	f000 80b8 	beq.w	80029d4 <_printf_i+0x198>
 8002864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002868:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800286c:	e03a      	b.n	80028e4 <_printf_i+0xa8>
 800286e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002872:	2b15      	cmp	r3, #21
 8002874:	d8f6      	bhi.n	8002864 <_printf_i+0x28>
 8002876:	a101      	add	r1, pc, #4	@ (adr r1, 800287c <_printf_i+0x40>)
 8002878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800287c:	080028d5 	.word	0x080028d5
 8002880:	080028e9 	.word	0x080028e9
 8002884:	08002865 	.word	0x08002865
 8002888:	08002865 	.word	0x08002865
 800288c:	08002865 	.word	0x08002865
 8002890:	08002865 	.word	0x08002865
 8002894:	080028e9 	.word	0x080028e9
 8002898:	08002865 	.word	0x08002865
 800289c:	08002865 	.word	0x08002865
 80028a0:	08002865 	.word	0x08002865
 80028a4:	08002865 	.word	0x08002865
 80028a8:	080029e7 	.word	0x080029e7
 80028ac:	08002913 	.word	0x08002913
 80028b0:	080029a1 	.word	0x080029a1
 80028b4:	08002865 	.word	0x08002865
 80028b8:	08002865 	.word	0x08002865
 80028bc:	08002a09 	.word	0x08002a09
 80028c0:	08002865 	.word	0x08002865
 80028c4:	08002913 	.word	0x08002913
 80028c8:	08002865 	.word	0x08002865
 80028cc:	08002865 	.word	0x08002865
 80028d0:	080029a9 	.word	0x080029a9
 80028d4:	6833      	ldr	r3, [r6, #0]
 80028d6:	1d1a      	adds	r2, r3, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6032      	str	r2, [r6, #0]
 80028dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028e4:	2301      	movs	r3, #1
 80028e6:	e09c      	b.n	8002a22 <_printf_i+0x1e6>
 80028e8:	6833      	ldr	r3, [r6, #0]
 80028ea:	6820      	ldr	r0, [r4, #0]
 80028ec:	1d19      	adds	r1, r3, #4
 80028ee:	6031      	str	r1, [r6, #0]
 80028f0:	0606      	lsls	r6, r0, #24
 80028f2:	d501      	bpl.n	80028f8 <_printf_i+0xbc>
 80028f4:	681d      	ldr	r5, [r3, #0]
 80028f6:	e003      	b.n	8002900 <_printf_i+0xc4>
 80028f8:	0645      	lsls	r5, r0, #25
 80028fa:	d5fb      	bpl.n	80028f4 <_printf_i+0xb8>
 80028fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002900:	2d00      	cmp	r5, #0
 8002902:	da03      	bge.n	800290c <_printf_i+0xd0>
 8002904:	232d      	movs	r3, #45	@ 0x2d
 8002906:	426d      	negs	r5, r5
 8002908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800290c:	4858      	ldr	r0, [pc, #352]	@ (8002a70 <_printf_i+0x234>)
 800290e:	230a      	movs	r3, #10
 8002910:	e011      	b.n	8002936 <_printf_i+0xfa>
 8002912:	6821      	ldr	r1, [r4, #0]
 8002914:	6833      	ldr	r3, [r6, #0]
 8002916:	0608      	lsls	r0, r1, #24
 8002918:	f853 5b04 	ldr.w	r5, [r3], #4
 800291c:	d402      	bmi.n	8002924 <_printf_i+0xe8>
 800291e:	0649      	lsls	r1, r1, #25
 8002920:	bf48      	it	mi
 8002922:	b2ad      	uxthmi	r5, r5
 8002924:	2f6f      	cmp	r7, #111	@ 0x6f
 8002926:	4852      	ldr	r0, [pc, #328]	@ (8002a70 <_printf_i+0x234>)
 8002928:	6033      	str	r3, [r6, #0]
 800292a:	bf14      	ite	ne
 800292c:	230a      	movne	r3, #10
 800292e:	2308      	moveq	r3, #8
 8002930:	2100      	movs	r1, #0
 8002932:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002936:	6866      	ldr	r6, [r4, #4]
 8002938:	60a6      	str	r6, [r4, #8]
 800293a:	2e00      	cmp	r6, #0
 800293c:	db05      	blt.n	800294a <_printf_i+0x10e>
 800293e:	6821      	ldr	r1, [r4, #0]
 8002940:	432e      	orrs	r6, r5
 8002942:	f021 0104 	bic.w	r1, r1, #4
 8002946:	6021      	str	r1, [r4, #0]
 8002948:	d04b      	beq.n	80029e2 <_printf_i+0x1a6>
 800294a:	4616      	mov	r6, r2
 800294c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002950:	fb03 5711 	mls	r7, r3, r1, r5
 8002954:	5dc7      	ldrb	r7, [r0, r7]
 8002956:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800295a:	462f      	mov	r7, r5
 800295c:	42bb      	cmp	r3, r7
 800295e:	460d      	mov	r5, r1
 8002960:	d9f4      	bls.n	800294c <_printf_i+0x110>
 8002962:	2b08      	cmp	r3, #8
 8002964:	d10b      	bne.n	800297e <_printf_i+0x142>
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	07df      	lsls	r7, r3, #31
 800296a:	d508      	bpl.n	800297e <_printf_i+0x142>
 800296c:	6923      	ldr	r3, [r4, #16]
 800296e:	6861      	ldr	r1, [r4, #4]
 8002970:	4299      	cmp	r1, r3
 8002972:	bfde      	ittt	le
 8002974:	2330      	movle	r3, #48	@ 0x30
 8002976:	f806 3c01 	strble.w	r3, [r6, #-1]
 800297a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800297e:	1b92      	subs	r2, r2, r6
 8002980:	6122      	str	r2, [r4, #16]
 8002982:	f8cd a000 	str.w	sl, [sp]
 8002986:	464b      	mov	r3, r9
 8002988:	aa03      	add	r2, sp, #12
 800298a:	4621      	mov	r1, r4
 800298c:	4640      	mov	r0, r8
 800298e:	f7ff fee7 	bl	8002760 <_printf_common>
 8002992:	3001      	adds	r0, #1
 8002994:	d14a      	bne.n	8002a2c <_printf_i+0x1f0>
 8002996:	f04f 30ff 	mov.w	r0, #4294967295
 800299a:	b004      	add	sp, #16
 800299c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	6023      	str	r3, [r4, #0]
 80029a8:	4832      	ldr	r0, [pc, #200]	@ (8002a74 <_printf_i+0x238>)
 80029aa:	2778      	movs	r7, #120	@ 0x78
 80029ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	6831      	ldr	r1, [r6, #0]
 80029b4:	061f      	lsls	r7, r3, #24
 80029b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80029ba:	d402      	bmi.n	80029c2 <_printf_i+0x186>
 80029bc:	065f      	lsls	r7, r3, #25
 80029be:	bf48      	it	mi
 80029c0:	b2ad      	uxthmi	r5, r5
 80029c2:	6031      	str	r1, [r6, #0]
 80029c4:	07d9      	lsls	r1, r3, #31
 80029c6:	bf44      	itt	mi
 80029c8:	f043 0320 	orrmi.w	r3, r3, #32
 80029cc:	6023      	strmi	r3, [r4, #0]
 80029ce:	b11d      	cbz	r5, 80029d8 <_printf_i+0x19c>
 80029d0:	2310      	movs	r3, #16
 80029d2:	e7ad      	b.n	8002930 <_printf_i+0xf4>
 80029d4:	4826      	ldr	r0, [pc, #152]	@ (8002a70 <_printf_i+0x234>)
 80029d6:	e7e9      	b.n	80029ac <_printf_i+0x170>
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	f023 0320 	bic.w	r3, r3, #32
 80029de:	6023      	str	r3, [r4, #0]
 80029e0:	e7f6      	b.n	80029d0 <_printf_i+0x194>
 80029e2:	4616      	mov	r6, r2
 80029e4:	e7bd      	b.n	8002962 <_printf_i+0x126>
 80029e6:	6833      	ldr	r3, [r6, #0]
 80029e8:	6825      	ldr	r5, [r4, #0]
 80029ea:	6961      	ldr	r1, [r4, #20]
 80029ec:	1d18      	adds	r0, r3, #4
 80029ee:	6030      	str	r0, [r6, #0]
 80029f0:	062e      	lsls	r6, r5, #24
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	d501      	bpl.n	80029fa <_printf_i+0x1be>
 80029f6:	6019      	str	r1, [r3, #0]
 80029f8:	e002      	b.n	8002a00 <_printf_i+0x1c4>
 80029fa:	0668      	lsls	r0, r5, #25
 80029fc:	d5fb      	bpl.n	80029f6 <_printf_i+0x1ba>
 80029fe:	8019      	strh	r1, [r3, #0]
 8002a00:	2300      	movs	r3, #0
 8002a02:	6123      	str	r3, [r4, #16]
 8002a04:	4616      	mov	r6, r2
 8002a06:	e7bc      	b.n	8002982 <_printf_i+0x146>
 8002a08:	6833      	ldr	r3, [r6, #0]
 8002a0a:	1d1a      	adds	r2, r3, #4
 8002a0c:	6032      	str	r2, [r6, #0]
 8002a0e:	681e      	ldr	r6, [r3, #0]
 8002a10:	6862      	ldr	r2, [r4, #4]
 8002a12:	2100      	movs	r1, #0
 8002a14:	4630      	mov	r0, r6
 8002a16:	f7fd fbe3 	bl	80001e0 <memchr>
 8002a1a:	b108      	cbz	r0, 8002a20 <_printf_i+0x1e4>
 8002a1c:	1b80      	subs	r0, r0, r6
 8002a1e:	6060      	str	r0, [r4, #4]
 8002a20:	6863      	ldr	r3, [r4, #4]
 8002a22:	6123      	str	r3, [r4, #16]
 8002a24:	2300      	movs	r3, #0
 8002a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a2a:	e7aa      	b.n	8002982 <_printf_i+0x146>
 8002a2c:	6923      	ldr	r3, [r4, #16]
 8002a2e:	4632      	mov	r2, r6
 8002a30:	4649      	mov	r1, r9
 8002a32:	4640      	mov	r0, r8
 8002a34:	47d0      	blx	sl
 8002a36:	3001      	adds	r0, #1
 8002a38:	d0ad      	beq.n	8002996 <_printf_i+0x15a>
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	079b      	lsls	r3, r3, #30
 8002a3e:	d413      	bmi.n	8002a68 <_printf_i+0x22c>
 8002a40:	68e0      	ldr	r0, [r4, #12]
 8002a42:	9b03      	ldr	r3, [sp, #12]
 8002a44:	4298      	cmp	r0, r3
 8002a46:	bfb8      	it	lt
 8002a48:	4618      	movlt	r0, r3
 8002a4a:	e7a6      	b.n	800299a <_printf_i+0x15e>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4632      	mov	r2, r6
 8002a50:	4649      	mov	r1, r9
 8002a52:	4640      	mov	r0, r8
 8002a54:	47d0      	blx	sl
 8002a56:	3001      	adds	r0, #1
 8002a58:	d09d      	beq.n	8002996 <_printf_i+0x15a>
 8002a5a:	3501      	adds	r5, #1
 8002a5c:	68e3      	ldr	r3, [r4, #12]
 8002a5e:	9903      	ldr	r1, [sp, #12]
 8002a60:	1a5b      	subs	r3, r3, r1
 8002a62:	42ab      	cmp	r3, r5
 8002a64:	dcf2      	bgt.n	8002a4c <_printf_i+0x210>
 8002a66:	e7eb      	b.n	8002a40 <_printf_i+0x204>
 8002a68:	2500      	movs	r5, #0
 8002a6a:	f104 0619 	add.w	r6, r4, #25
 8002a6e:	e7f5      	b.n	8002a5c <_printf_i+0x220>
 8002a70:	08002da9 	.word	0x08002da9
 8002a74:	08002dba 	.word	0x08002dba

08002a78 <__sflush_r>:
 8002a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a80:	0716      	lsls	r6, r2, #28
 8002a82:	4605      	mov	r5, r0
 8002a84:	460c      	mov	r4, r1
 8002a86:	d454      	bmi.n	8002b32 <__sflush_r+0xba>
 8002a88:	684b      	ldr	r3, [r1, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc02      	bgt.n	8002a94 <__sflush_r+0x1c>
 8002a8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	dd48      	ble.n	8002b26 <__sflush_r+0xae>
 8002a94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a96:	2e00      	cmp	r6, #0
 8002a98:	d045      	beq.n	8002b26 <__sflush_r+0xae>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002aa0:	682f      	ldr	r7, [r5, #0]
 8002aa2:	6a21      	ldr	r1, [r4, #32]
 8002aa4:	602b      	str	r3, [r5, #0]
 8002aa6:	d030      	beq.n	8002b0a <__sflush_r+0x92>
 8002aa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	0759      	lsls	r1, r3, #29
 8002aae:	d505      	bpl.n	8002abc <__sflush_r+0x44>
 8002ab0:	6863      	ldr	r3, [r4, #4]
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ab6:	b10b      	cbz	r3, 8002abc <__sflush_r+0x44>
 8002ab8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002aba:	1ad2      	subs	r2, r2, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ac0:	6a21      	ldr	r1, [r4, #32]
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	47b0      	blx	r6
 8002ac6:	1c43      	adds	r3, r0, #1
 8002ac8:	89a3      	ldrh	r3, [r4, #12]
 8002aca:	d106      	bne.n	8002ada <__sflush_r+0x62>
 8002acc:	6829      	ldr	r1, [r5, #0]
 8002ace:	291d      	cmp	r1, #29
 8002ad0:	d82b      	bhi.n	8002b2a <__sflush_r+0xb2>
 8002ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b7c <__sflush_r+0x104>)
 8002ad4:	40ca      	lsrs	r2, r1
 8002ad6:	07d6      	lsls	r6, r2, #31
 8002ad8:	d527      	bpl.n	8002b2a <__sflush_r+0xb2>
 8002ada:	2200      	movs	r2, #0
 8002adc:	6062      	str	r2, [r4, #4]
 8002ade:	04d9      	lsls	r1, r3, #19
 8002ae0:	6922      	ldr	r2, [r4, #16]
 8002ae2:	6022      	str	r2, [r4, #0]
 8002ae4:	d504      	bpl.n	8002af0 <__sflush_r+0x78>
 8002ae6:	1c42      	adds	r2, r0, #1
 8002ae8:	d101      	bne.n	8002aee <__sflush_r+0x76>
 8002aea:	682b      	ldr	r3, [r5, #0]
 8002aec:	b903      	cbnz	r3, 8002af0 <__sflush_r+0x78>
 8002aee:	6560      	str	r0, [r4, #84]	@ 0x54
 8002af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002af2:	602f      	str	r7, [r5, #0]
 8002af4:	b1b9      	cbz	r1, 8002b26 <__sflush_r+0xae>
 8002af6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002afa:	4299      	cmp	r1, r3
 8002afc:	d002      	beq.n	8002b04 <__sflush_r+0x8c>
 8002afe:	4628      	mov	r0, r5
 8002b00:	f7ff fbf4 	bl	80022ec <_free_r>
 8002b04:	2300      	movs	r3, #0
 8002b06:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b08:	e00d      	b.n	8002b26 <__sflush_r+0xae>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	47b0      	blx	r6
 8002b10:	4602      	mov	r2, r0
 8002b12:	1c50      	adds	r0, r2, #1
 8002b14:	d1c9      	bne.n	8002aaa <__sflush_r+0x32>
 8002b16:	682b      	ldr	r3, [r5, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0c6      	beq.n	8002aaa <__sflush_r+0x32>
 8002b1c:	2b1d      	cmp	r3, #29
 8002b1e:	d001      	beq.n	8002b24 <__sflush_r+0xac>
 8002b20:	2b16      	cmp	r3, #22
 8002b22:	d11e      	bne.n	8002b62 <__sflush_r+0xea>
 8002b24:	602f      	str	r7, [r5, #0]
 8002b26:	2000      	movs	r0, #0
 8002b28:	e022      	b.n	8002b70 <__sflush_r+0xf8>
 8002b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	e01b      	b.n	8002b6a <__sflush_r+0xf2>
 8002b32:	690f      	ldr	r7, [r1, #16]
 8002b34:	2f00      	cmp	r7, #0
 8002b36:	d0f6      	beq.n	8002b26 <__sflush_r+0xae>
 8002b38:	0793      	lsls	r3, r2, #30
 8002b3a:	680e      	ldr	r6, [r1, #0]
 8002b3c:	bf08      	it	eq
 8002b3e:	694b      	ldreq	r3, [r1, #20]
 8002b40:	600f      	str	r7, [r1, #0]
 8002b42:	bf18      	it	ne
 8002b44:	2300      	movne	r3, #0
 8002b46:	eba6 0807 	sub.w	r8, r6, r7
 8002b4a:	608b      	str	r3, [r1, #8]
 8002b4c:	f1b8 0f00 	cmp.w	r8, #0
 8002b50:	dde9      	ble.n	8002b26 <__sflush_r+0xae>
 8002b52:	6a21      	ldr	r1, [r4, #32]
 8002b54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002b56:	4643      	mov	r3, r8
 8002b58:	463a      	mov	r2, r7
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	47b0      	blx	r6
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	dc08      	bgt.n	8002b74 <__sflush_r+0xfc>
 8002b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b6a:	81a3      	strh	r3, [r4, #12]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b74:	4407      	add	r7, r0
 8002b76:	eba8 0800 	sub.w	r8, r8, r0
 8002b7a:	e7e7      	b.n	8002b4c <__sflush_r+0xd4>
 8002b7c:	20400001 	.word	0x20400001

08002b80 <_fflush_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	690b      	ldr	r3, [r1, #16]
 8002b84:	4605      	mov	r5, r0
 8002b86:	460c      	mov	r4, r1
 8002b88:	b913      	cbnz	r3, 8002b90 <_fflush_r+0x10>
 8002b8a:	2500      	movs	r5, #0
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}
 8002b90:	b118      	cbz	r0, 8002b9a <_fflush_r+0x1a>
 8002b92:	6a03      	ldr	r3, [r0, #32]
 8002b94:	b90b      	cbnz	r3, 8002b9a <_fflush_r+0x1a>
 8002b96:	f7ff f9af 	bl	8001ef8 <__sinit>
 8002b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f3      	beq.n	8002b8a <_fflush_r+0xa>
 8002ba2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002ba4:	07d0      	lsls	r0, r2, #31
 8002ba6:	d404      	bmi.n	8002bb2 <_fflush_r+0x32>
 8002ba8:	0599      	lsls	r1, r3, #22
 8002baa:	d402      	bmi.n	8002bb2 <_fflush_r+0x32>
 8002bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bae:	f7ff fb9a 	bl	80022e6 <__retarget_lock_acquire_recursive>
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	f7ff ff5f 	bl	8002a78 <__sflush_r>
 8002bba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bbc:	07da      	lsls	r2, r3, #31
 8002bbe:	4605      	mov	r5, r0
 8002bc0:	d4e4      	bmi.n	8002b8c <_fflush_r+0xc>
 8002bc2:	89a3      	ldrh	r3, [r4, #12]
 8002bc4:	059b      	lsls	r3, r3, #22
 8002bc6:	d4e1      	bmi.n	8002b8c <_fflush_r+0xc>
 8002bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bca:	f7ff fb8d 	bl	80022e8 <__retarget_lock_release_recursive>
 8002bce:	e7dd      	b.n	8002b8c <_fflush_r+0xc>

08002bd0 <__swhatbuf_r>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd8:	2900      	cmp	r1, #0
 8002bda:	b096      	sub	sp, #88	@ 0x58
 8002bdc:	4615      	mov	r5, r2
 8002bde:	461e      	mov	r6, r3
 8002be0:	da0d      	bge.n	8002bfe <__swhatbuf_r+0x2e>
 8002be2:	89a3      	ldrh	r3, [r4, #12]
 8002be4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	bf14      	ite	ne
 8002bee:	2340      	movne	r3, #64	@ 0x40
 8002bf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	6031      	str	r1, [r6, #0]
 8002bf8:	602b      	str	r3, [r5, #0]
 8002bfa:	b016      	add	sp, #88	@ 0x58
 8002bfc:	bd70      	pop	{r4, r5, r6, pc}
 8002bfe:	466a      	mov	r2, sp
 8002c00:	f000 f848 	bl	8002c94 <_fstat_r>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	dbec      	blt.n	8002be2 <__swhatbuf_r+0x12>
 8002c08:	9901      	ldr	r1, [sp, #4]
 8002c0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002c0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002c12:	4259      	negs	r1, r3
 8002c14:	4159      	adcs	r1, r3
 8002c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c1a:	e7eb      	b.n	8002bf4 <__swhatbuf_r+0x24>

08002c1c <__smakebuf_r>:
 8002c1c:	898b      	ldrh	r3, [r1, #12]
 8002c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c20:	079d      	lsls	r5, r3, #30
 8002c22:	4606      	mov	r6, r0
 8002c24:	460c      	mov	r4, r1
 8002c26:	d507      	bpl.n	8002c38 <__smakebuf_r+0x1c>
 8002c28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002c2c:	6023      	str	r3, [r4, #0]
 8002c2e:	6123      	str	r3, [r4, #16]
 8002c30:	2301      	movs	r3, #1
 8002c32:	6163      	str	r3, [r4, #20]
 8002c34:	b003      	add	sp, #12
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	ab01      	add	r3, sp, #4
 8002c3a:	466a      	mov	r2, sp
 8002c3c:	f7ff ffc8 	bl	8002bd0 <__swhatbuf_r>
 8002c40:	9f00      	ldr	r7, [sp, #0]
 8002c42:	4605      	mov	r5, r0
 8002c44:	4639      	mov	r1, r7
 8002c46:	4630      	mov	r0, r6
 8002c48:	f7ff fbbc 	bl	80023c4 <_malloc_r>
 8002c4c:	b948      	cbnz	r0, 8002c62 <__smakebuf_r+0x46>
 8002c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c52:	059a      	lsls	r2, r3, #22
 8002c54:	d4ee      	bmi.n	8002c34 <__smakebuf_r+0x18>
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	81a3      	strh	r3, [r4, #12]
 8002c60:	e7e2      	b.n	8002c28 <__smakebuf_r+0xc>
 8002c62:	89a3      	ldrh	r3, [r4, #12]
 8002c64:	6020      	str	r0, [r4, #0]
 8002c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c6a:	81a3      	strh	r3, [r4, #12]
 8002c6c:	9b01      	ldr	r3, [sp, #4]
 8002c6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002c72:	b15b      	cbz	r3, 8002c8c <__smakebuf_r+0x70>
 8002c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c78:	4630      	mov	r0, r6
 8002c7a:	f000 f81d 	bl	8002cb8 <_isatty_r>
 8002c7e:	b128      	cbz	r0, 8002c8c <__smakebuf_r+0x70>
 8002c80:	89a3      	ldrh	r3, [r4, #12]
 8002c82:	f023 0303 	bic.w	r3, r3, #3
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	81a3      	strh	r3, [r4, #12]
 8002c8c:	89a3      	ldrh	r3, [r4, #12]
 8002c8e:	431d      	orrs	r5, r3
 8002c90:	81a5      	strh	r5, [r4, #12]
 8002c92:	e7cf      	b.n	8002c34 <__smakebuf_r+0x18>

08002c94 <_fstat_r>:
 8002c94:	b538      	push	{r3, r4, r5, lr}
 8002c96:	4d07      	ldr	r5, [pc, #28]	@ (8002cb4 <_fstat_r+0x20>)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	602b      	str	r3, [r5, #0]
 8002ca2:	f7fe f813 	bl	8000ccc <_fstat>
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	d102      	bne.n	8002cb0 <_fstat_r+0x1c>
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	b103      	cbz	r3, 8002cb0 <_fstat_r+0x1c>
 8002cae:	6023      	str	r3, [r4, #0]
 8002cb0:	bd38      	pop	{r3, r4, r5, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200001c8 	.word	0x200001c8

08002cb8 <_isatty_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	4d06      	ldr	r5, [pc, #24]	@ (8002cd4 <_isatty_r+0x1c>)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	602b      	str	r3, [r5, #0]
 8002cc4:	f7fe f812 	bl	8000cec <_isatty>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	d102      	bne.n	8002cd2 <_isatty_r+0x1a>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	b103      	cbz	r3, 8002cd2 <_isatty_r+0x1a>
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	bd38      	pop	{r3, r4, r5, pc}
 8002cd4:	200001c8 	.word	0x200001c8

08002cd8 <_sbrk_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	4d06      	ldr	r5, [pc, #24]	@ (8002cf4 <_sbrk_r+0x1c>)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	4604      	mov	r4, r0
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	602b      	str	r3, [r5, #0]
 8002ce4:	f7fe f81a 	bl	8000d1c <_sbrk>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d102      	bne.n	8002cf2 <_sbrk_r+0x1a>
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	b103      	cbz	r3, 8002cf2 <_sbrk_r+0x1a>
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	bd38      	pop	{r3, r4, r5, pc}
 8002cf4:	200001c8 	.word	0x200001c8

08002cf8 <_init>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	bf00      	nop
 8002cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfe:	bc08      	pop	{r3}
 8002d00:	469e      	mov	lr, r3
 8002d02:	4770      	bx	lr

08002d04 <_fini>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	bf00      	nop
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr
